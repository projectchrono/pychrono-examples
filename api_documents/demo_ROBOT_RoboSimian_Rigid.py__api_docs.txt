# RoboSimian on Rigid Terrain - API Documentation

## Table of Contents

1. [Library](#library)
2. [Contact and Collision Setting](#contact-and-collision-setting)
3. [Visualization Setting](#visualization-setting)
4. [Initialize Body](#initialize-body)
5. [Setting Parameters](#setting-parameters)
6. [Simulation Loop](#simulation-loop)

---

## Library

### Libraries and Modules Imported

1. `errno` - Standard Python library for error number constants.
2. `os` - Standard Python library for interacting with the operating system.
3. `math` - Standard Python library for mathematical functions.
4. `numpy` - Third-party library for numerical computations.
5. `pychrono` - Chrono: a multi-physics simulation engine (http://projectchrono.org/).
6. `pychrono.robot` - Module for robot-specific components in Chrono.
7. `pychrono.irrlicht` - Optional module for visualization using Irrlicht in Chrono.

---

## Contact and Collision Setting

### APIs and Functions

#### 1. `CreateTerrain`

- **Arguments:**
  - `sys`: The simulation system (Chrono system).
  - `length`: Length of the terrain.
  - `width`: Width of the terrain.
  - `height`: Height of the terrain.
  - `offset`: Offset for placing the terrain.

- **Usage:**
  - This function sets up the terrain with collision properties and visual shapes. It creates the ground body, and sets friction and restitution properties for the contact material.

#### 2. `SetContactProperties`

- **Arguments:**
  - `robot`: The RoboSimian robot instance.

- **Usage:**
  - Sets the contact properties for the robot's sled and wheels, including friction and Young's modulus if the contact method is SMC (Smooth Particle Hydrodynamics).

---

## Visualization Setting

### APIs and Functions

#### 1. `chronoirr.ChVisualSystemIrrlicht`

- **Usage:**
  - Creates an Irrlicht-based visual system for rendering and visualization.

#### 2. `vis.AttachSystem`

- **Arguments:**
  - `sys`: The Chrono system to attach to the visual system.

- **Usage:**
  - Attaches the given Chrono system to the visual system for rendering.

#### 3. `vis.SetWindowSize`

- **Arguments:**
  - `1024`: Width of the window.
  - `768`: Height of the window.

- **Usage:**
  - Sets the size of the rendering window.

#### 4. `vis.SetWindowTitle`

- **Arguments:**
  - `'RoboSimian - Rigid terrain'`: Title of the window.

- **Usage:**
  - Sets the title of the rendering window.

#### 5. `vis.Initialize`

- **Usage:**
  - Initializes the visual system.

#### 6. `vis.AddLogo`

- **Arguments:**
  - `logo_path`: Path to the logo file.

- **Usage:**
  - Adds a logo to the visualization window.

#### 7. `vis.AddSkyBox`

- **Usage:**
  - Adds a skybox to the visualization scene.

#### 8. `vis.AddCamera`

- **Arguments:**
  - `camera_position`: Position of the camera.
  - `camera_target`: Target position the camera is looking at.

- **Usage:**
  - Adds a camera to the visualization scene.

#### 9. `vis.AddLight`

- **Arguments:**
  - `light_position`: Position of the light source.
  - `light_radius`: Radius of the light.

- **Usage:**
  - Adds a light source to the visualization scene.

---

## Initialize Body

### APIs and Functions

#### 1. `robosimian.RoboSimian`

- **Arguments:**
  - `sys`: The Chrono system.
  - `True`: Enable translational degrees of freedom.
  - `True`: Enable rotational degrees of freedom.

- **Usage:**
  - Creates the RoboSimian robot and initializes it with the provided system and settings.

#### 2. `robot.Initialize`

- **Arguments:**
  - `ChCoordsysd`: Coordinate system for robot initialization.

- **Usage:**
  - Initializes the RoboSimian robot at the specified coordinates.

#### 3. `robot.SetOutputDirectory`

- **Arguments:**
  - `out_dir`: Directory for output data.

- **Usage:**
  - Sets the directory where the robot's output data will be saved.

---

## Setting Parameters

### Parameters Used

1. `time_step` (1e-3): Time step size for the simulation loop.
2. `drop` (True): Specifies if the robot should drop onto the terrain.
3. `mode` (robosimian.LocomotionMode_WALK): Locomotion mode of the robot.
4. `contact_method` (chrono.ChContactMethod_SMC): The contact method (SMC).
5. `duration_pose` (1.0): Interval to assume initial pose.
6. `duration_settle_robot` (0.5): Interval to allow the robot to settle on the terrain.
7. `duration_sim` (10): Duration of the actual locomotion simulation.
8. `output_fps` (100): Frequency of output data.
9. `render_fps` (60): Frequency of rendering.
10. `out_dir` ("./ROBOSIMIAN_RIGID"): Output directory.
11. `pov_dir` (out_dir + "/POVRAY"): POV-Ray output directory.
12. `img_dir` (out_dir + "/IMG"): Image output directory.
13. `data_output` (True): Enable data output.
14. `povray_output` (True/False): Enable POV-Ray output.
15. `image_output` (True/False): Enable image output.

---

## Simulation Loop

### APIs and Functions

#### 1. `sys.SetCollisionSystemType`

- **Arguments:**
  - `chrono.ChCollisionSystem.Type_BULLET`: Collision system type.

- **Usage:**
  - Sets the type of collision system (Bullet in this case).

#### 2. `sys.GetSolver().AsIterative().SetMaxIterations`

- **Arguments:**
  - `200`: Maximum number of solver iterations.

- **Usage:**
  - Sets the maximum number of iterations for the iterative solver.

#### 3. `sys.SetSolverType`

- **Arguments:**
  - `chrono.ChSolver.Type_BARZILAIBORWEIN`: Solver type.

- **Usage:**
  - Sets the type of solver to be used.

#### 4. `sys.SetGravitationalAcceleration`

- **Arguments:**
  - `chrono.ChVector3d(0, 0, -9.8)`: Gravitational acceleration vector.

- **Usage:**
  - Sets the gravitational acceleration for the system.

#### 5. `robosimian.RS_Driver`

- **Arguments:**
  - `start_file`: File specifying the start phase.
  - `cycle_file`: File specifying the cycle phase.
  - `stop_file`: File specifying the stop phase.
  - `True`: Enable interpolation.

- **Usage:**
  - Creates and configures a driver for the RoboSimian robot based on the locomotion mode.

#### 6. `driver.RegisterPhaseChangeCallback`

- **Arguments:**
  - `cbk`: Callback to be triggered during phase changes.

- **Usage:**
  - Registers a callback function for phase changes in the driver.

#### 7. `driver.SetTimeOffsets`

- **Arguments:**
  - `duration_pose`: Duration for the initial pose phase.
  - `duration_settle_robot`: Duration for the settling phase.

- **Usage:**
  - Sets the time offsets for various phases of the simulation.

#### 8. `robot.SetDriver`

- **Arguments:**
  - `driver`: The driver instance to be set.

- **Usage:**
  - Sets the driver for the RoboSimian robot.

#### 9. `caster.Update`

- **Usage:**
  - Updates the RayCaster calculation for ray hits and visualization.

#### 10. `robot.DoStepDynamics`

- **Arguments:**
  - `time_step`: The size of the time step.

- **Usage:**
  - Performs the dynamics steps for the robot.

#### 11. `vis.BeginScene`

- **Usage:**
  - Begins the rendering of a new scene.

#### 12. `vis.Render`

- **Usage:**
  - Renders the current scene.

#### 13. `robot.Output`

- **Usage:**
  - Outputs the simulation data at the specified intervals.

#### 14. `chrono.WriteVisualizationAssets`

- **Arguments:**
  - `sys`: The Chrono system.
  - `filename`: Name of the file for saving visualization assets.

- **Usage:**
  - Writes the visualization assets to a file for POV-Ray rendering.

#### 15. `vis.GetVideoDriver().createScreenShot`

- **Usage:**
  - Creates a screenshot of the current visualization window.

#### 16. `vis.GetVideoDriver().writeImageToFile`

- **Arguments:**
  - `image`: The screenshot image to save.
  - `filename`: Name of the file to save the screenshot.

- **Usage:**
  - Writes the screenshot image to a file.

#### 17. `vis.EndScene`

- **Usage:**
  - Ends the rendering of the current scene.

#### 18. `cbk.GetAvgSpeed`

- **Usage:**
  - Gets the average speed of the RoboSimian robot.

---