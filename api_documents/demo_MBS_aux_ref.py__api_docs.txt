# API Documentation for the Provided Code Example

## Library

### pychrono.core
- **Usage**: Provides the core functionality for physical simulation and modeling.

### pychrono.irrlicht
- **Usage**: Provides tools for visualization using the Irrlicht engine.

### math
- **Usage**: Imported but not used in the provided code.

---

## Contact and Collision Settings

### chrono.ChSystemNSC
- **Arguments**: None.
- **Usage**: Creates a new non-smooth contact system. Used to handle the dynamics of bodies and collisions.

### sys.SetGravitationalAcceleration
- **Arguments**:
    - `chrono.ChVector3d(0, -9.81, 0)`: Specifies the gravitational acceleration vector.
- **Usage**: Sets the gravitational acceleration for the system.

### ground.SetFixed
- **Arguments**:
    - `True`: Fixes the body in space.
- **Usage**: Sets the ground body as fixed, making it immovable.
  
### ground.EnableCollision
- **Arguments**:
    - `False`: Disables collision for the body.
- **Usage**: Disables collision detection for the ground body.

### pend_1.EnableCollision
- **Arguments**:
    - `False`: Disables collision for the body.
- **Usage**: Disables collision detection for the first pendulum.

### pend_2.EnableCollision
- **Arguments**:
    - `False`: Disables collision for the body.
- **Usage**: Disables collision detection for the second pendulum.

---

## Visualization Settings

### chrono.ChVisualShapeCylinder
- **Arguments**:
    - `0.2`: Radius of the cylinder.
    - `0.4` or `2`: Height of the cylinder.
- **Usage**: Creates a cylindrical visual shape for visualization.

### cyl_1.SetColor
- **Arguments**:
    - `chrono.ChColor(0.6, 0, 0)`: RGB color for the shape.
- **Usage**: Sets the color of the cylinder for the first pendulum.

### cyl_2.SetColor
- **Arguments**:
    - `chrono.ChColor(0, 0, 0.6)`: RGB color for the shape.
- **Usage**: Sets the color of the cylinder for the second pendulum.

### vis.AttachSystem
- **Arguments**:
    - `sys`: The physical system to visualize.
- **Usage**: Attaches the physical system to the visualization system.

### vis.SetWindowSize
- **Arguments**:
    - `1024`: Width of the window.
    - `768`: Height of the window.
- **Usage**: Sets the window size for the visualization.

### vis.SetWindowTitle
- **Arguments**:
    - `'ChBodyAuxRef demo'`: Title of the window.
- **Usage**: Sets the title for the visualization window.

### vis.Initialize
- **Arguments**: None.
- **Usage**: Initializes the visualization window.

### vis.AddLogo
- **Arguments**:
    - `chrono.GetChronoDataFile('logo_pychrono_alpha.png')`: Path to the logo image file.
- **Usage**: Adds a logo to the visualization window.

### vis.AddSkyBox
- **Arguments**: None.
- **Usage**: Adds a skybox to the visualization.

### vis.AddCamera
- **Arguments**:
    - `chrono.ChVector3d(0, 3, 6)`: Position of the camera.
- **Usage**: Adds a camera to the visualization.

### vis.AddTypicalLights
- **Arguments**: None.
- **Usage**: Adds typical lights to the visualization.

---

## Initialize Body

### chrono.ChBody
- **Arguments**: None.
- **Usage**: Creates a new body with default parameters.

### chrono.ChBodyAuxRef
- **Arguments**: None.
- **Usage**: Creates a new body that allows specifying reference frames for inertia and other properties.

### sys.Add
- **Arguments**:
    - `ground`, `pend_1`, `pend_2`: Body to be added.
- **Usage**: Adds a body to the physical system.

### ground.AddVisualShape
- **Arguments**:
    - `cyl_1`, `chrono.ChFramed(chrono.ChVector3d(0, 0, +1))`: Visual shape to add, along with its frame.
- **Usage**: Adds a visual shape to the ground body.

### pend_1.AddVisualShape
- **Arguments**:
    - `cyl_1`: Visual shape to add.
    - `chrono.ChFramed(chrono.VNULL, chrono.QuatFromAngleY(chrono.CH_PI_2))`: Position and orientation of the visual shape.
- **Usage**: Adds a visual shape to the first pendulum body.

### pend_2.AddVisualShape
- **Arguments**:
    - `cyl_2`: Visual shape to add.
    - `chrono.ChFramed(chrono.ChVector3d(1, 0, 0), chrono.QuatFromAngleY(chrono.CH_PI_2))`: Position and orientation of the visual shape.
- **Usage**: Adds a visual shape to the second pendulum body.

### pend_1.SetPos
- **Arguments**:
    - `chrono.ChVector3d(1, 0, 1)`: Initial position of the body.
- **Usage**: Sets the initial position of the first pendulum.

### pend_2.SetFrameCOMToRef
- **Arguments**:
    - `chrono.ChFramed(chrono.ChVector3d(1, 0, 0), chrono.ChQuaterniond(1, 0, 0, 0))`: Frame for the Center of Mass relative to the reference frame.
- **Usage**: Sets the frame for the center of mass relative to the reference frame for the second pendulum.

### pend_2.SetFrameRefToAbs
- **Arguments**:
    - `chrono.ChFramed(chrono.ChVector3d(0, 0, -1))`: Frame for the reference relative to the absolute frame.
- **Usage**: Sets the reference frame relative to the absolute frame for the second pendulum.

### pend_1.SetMass
- **Arguments**:
    - `1`: Mass of the body.
- **Usage**: Sets the mass of the first pendulum.

### pend_1.SetInertiaXX
- **Arguments**:
    - `chrono.ChVector3d(0.2, 1, 1)`: Inertia tensor components.
- **Usage**: Sets the inertia of the first pendulum.

### pend_2.SetMass
- **Arguments**:
    - `1`: Mass of the body.
- **Usage**: Sets the mass of the second pendulum.

### pend_2.SetInertiaXX
- **Arguments**:
    - `chrono.ChVector3d(0.2, 1, 1)`: Inertia tensor components.
- **Usage**: Sets the inertia of the second pendulum.

### chrono.ChLinkLockRevolute
- **Arguments**: None.
- **Usage**: Creates a revolute joint for connecting bodies.

### rev_1.Initialize
- **Arguments**:
    - `ground`: First body in the joint.
    - `pend_1`: Second body in the joint.
    - `chrono.ChFramed(chrono.ChVector3d(0, 0, 1), chrono.ChQuaterniond(1, 0, 0, 0))`: Frame of the joint in the absolute coordinate system.
- **Usage**: Initializes the revolute joint connecting the ground and the first pendulum.

### rev_2.Initialize
- **Arguments**:
    - `ground`: First body in the joint.
    - `pend_2`: Second body in the joint.
    - `chrono.ChFramed(chrono.ChVector3d(0, 0, -2), chrono.ChQuaterniond(1, 0, 0, 0))`: Frame of the joint in the absolute coordinate system.
- **Usage**: Initializes the revolute joint connecting the ground and the second pendulum.

---

## Setting Parameters

### `chrono.ChVector3d`
- **Arguments**:
    - `(0, -9.81, 0)`: Specifies the gravitational vector.
    - `(1, 0, 1)`: Initial position of the first pendulum.
    - `(1, 0, 0)`, `(0, 0, -1)`: Frames for the second pendulum.
- **Usage**: Vector class used to set positions and gravitational acceleration.

### `chrono.ChQuaterniond`
- **Arguments**:
    - `(1, 0, 0, 0)`: Default quaternion.
- **Usage**: Quaternion class used to set orientation.

### `chrono.ChColor`
- **Arguments**:
    - `(0.6, 0, 0)`: Red color.
    - `(0, 0, 0.6)`: Blue color.
- **Usage**: Class to set colors for visual shapes.

---

## Simulation Loop

### vis.Run
- **Arguments**: None.
- **Usage**: Checks if the visualization window should stay open.

### vis.BeginScene
- **Arguments**: None.
- **Usage**: Prepares the scene for rendering.

### vis.Render
- **Arguments**: None.
- **Usage**: Renders the scene.

### vis.EndScene
- **Arguments**: None.
- **Usage**: Finalizes the scene rendering.

### sys.DoStepDynamics
- **Arguments**:
    - `1e-3`: Time step for the simulation.
- **Usage**: Advances the dynamics simulation by the specified time step.

### pend_1.GetPos
- **Arguments**: None.
- **Usage**: Gets the position of the first pendulum's Center of Mass.

### pend_2.GetPos
- **Arguments**: None.
- **Usage**: Gets the position of the second pendulum's Center of Mass.

### pend_2.GetFrameRefToAbs
- **Arguments**: None.
- **Usage**: Gets the reference frame of the second pendulum relative to the absolute coordinate system.

### pend_1.GetPosDt
- **Arguments**: None.
- **Usage**: Gets the linear velocity of the first pendulum's Center of Mass.

### pend_2.GetPosDt
- **Arguments**: None.
- **Usage**: Gets the linear velocity of the second pendulum's Center of Mass.
