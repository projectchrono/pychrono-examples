# Project Chrono API Documentation

## Library
**Name:** `pychrono.core`, `pychrono.irrlicht`, `pychrono.fea`, `pychrono.pardisomkl`

**Description:** The provided code utilizes the following libraries:
- `pychrono.core`: Core Chrono components.
- `pychrono.irrlicht`: Visualization using the Irrlicht engine.
- `pychrono.fea`: Finite Element Analysis (FEA) module.
- `pychrono.pardisomkl`: Solver module using Intel's Pardiso.

**Usage:** These libraries provide functionalities for physical simulations, visualization, finite element analysis, and advanced solvers.

## Contact and Collision Setting
The provided code does not directly handle contact materials or collision shapes. Its main focus is on setting up FEA elements and simulations.

## Visualization Setting

### **`chrono.ChVisualShapeFEA`**
**Arguments:** 
- FEA Mesh object

**Usage:** Attaches a visual representation to an FEA mesh, automatically updating the visualization based on mesh changes. Various display settings can be adjusted, like smooth faces, wireframes, shell resolutions, FEM data, and glyph types.

### **`chrono.ChVisualSystemIrrlicht`**
**Arguments:** 
- None (Initialized without arguments)

**Usage:** Sets up the visualization window using Irrlicht, attaches to the physical system, and initializes with specific settings:
- `AttachSystem(sys)`: Attaches the Chrono system to the visualization.
- `SetWindowSize(1024, 768)`: Sets the window size.
- `SetWindowTitle('Shells FEA test: triangle BST elements')`: Sets the window title.
- `Initialize()`: Initializes the visualization system.
- `AddLogo()`: Adds a logo to the visualization window.
- `AddSkyBox()`: Adds a skybox background.
- `AddCamera()`: Sets up a camera in the scene.
- `AddTypicalLights()`: Adds default lights to the scene.

## Initialize Body

### **`chrono.ChSystemSMC`**
**Arguments:** 
- None (Initialized without arguments)

**Usage:** Creates a Chrono physical system using the SMC model, which includes handling various physical interactions within the simulation.

### **`fea.ChMesh`**
**Arguments:** 
- None (Initialized without arguments)

**Usage:** Creates a mesh container for nodes and elements. This mesh is then added to the system using the `Add()` method of `chrono.ChSystemSMC`.

### **`fea.ChMaterialShellKirchhoff`**
**Arguments:** 
- Elasticity model (Instance of `fea.ChElasticityKirchhoffIsothropic`)

**Usage:** Defines a shell material based on Kirchhoff's theory. This material is applied to elements in the mesh.

### **`fea.ChNodeFEAxyz`**
**Arguments:** 
- Position vector (Instance of `chrono.ChVector3d`)

**Usage:** Creates a finite element node at the specified position. These nodes are added to the `fea.ChMesh`.

### **`fea.ChElementShellBST`**
**Arguments:** 
- None (Initialized without arguments)

**Usage:** Creates a BST shell element and assigns nodes and layers to it.

## Setting Parameters

### **FEA Material Properties:**
- `density`: Density of the material.
- `E`: Young's modulus (Elasticity).
- `nu`: Poisson's ratio.
- `thickness`: Thickness of the shell elements.

### **Mesh Parameters:**
- `L_x`, `L_z`: Dimensions of the mesh.
- `nsections_x`, `nsections_z`: Number of sections in each dimension of the mesh.

**Usage:** These parameters are set to define the physical properties and the discretization of the FEA model within the simulation.

## Simulation Loop

### **`chrono.ChFunctionInterp`**
**Arguments:** 
- None (Initialized without arguments)

**Usage:** Used for interpolating functions within the simulation, though their exact role in the loop is not clear in the provided code.

### **`mkl.ChSolverPardisoMKL`**
**Arguments:** 
- None (Initialized without arguments)

**Usage:** Sets up and configures the PardisoMKL solver for the system. This solver is used to solve the system of equations during the simulation steps.

### **`sys.DoStepDynamics(timestep)`**
**Arguments:** 
- `timestep`: The time step for the simulation.

**Usage:** Advances the simulation by a single time step defined by the `timestep` variable.

### Visualization Loop
- `vis.Run()`: Checks if the visualization is running.
- `vis.BeginScene()`: Begins rendering the scene.
- `vis.Render()`: Renders the current scene.
- `vis.EndScene():` Ends rendering of the scene. 

### **`sys.Setup()` and `sys.Update()`**
**Arguments:** 
- None

**Usage:** `Setup()` prepares the system for simulation, performing necessary pre-computation. `Update()` updates the state of the system, ensuring all changes are applied before proceeding with the simulation steps.

### **Control Parameters:**
- `timestep`: Defines the time increment for each simulation step.
- `mtime`: A time variable for controlling the simulation loop. Not explicitly used but indicates potential usage for time-tracking.

