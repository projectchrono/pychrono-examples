# PyChrono Simulation Example Documentation

This document provides a detailed description of the APIs and functions used in the provided PyChrono simulation code.

## Library:

### pychrono.core
- **Usage:** The core library for Chrono, providing essential elements for creating and managing physics simulations.

### pychrono.irrlicht
- **Usage:** The visualization library for Chrono, leveraging the Irrlicht engine to render and display simulation objects.

## Contact and Collision Setting:

### chrono.SetChronoDataPath
- **Arguments:** 
  - `path`: Path to the Chrono data directory.
- **Usage:** Sets the path where Chrono can find necessary data like meshes and textures.

### chrono.ChSystemNSC
- **Arguments:** None
- **Usage:** Creates a new simulation system using the Non-Smooth Contact (NSC) method.

### sys.SetCollisionSystemType
- **Arguments:** 
  - `type`: Type of collision system (e.g., `chrono.ChCollisionSystem.Type_BULLET`).
- **Usage:** Specifies the collision detection system to use.

### chrono.ChCollisionModel.SetDefaultSuggestedEnvelope
- **Arguments:** 
  - `envelope`: Default collision margin.
- **Usage:** Sets the global collision margin envelope, important for very large or very small objects.

### chrono.ChCollisionModel.SetDefaultSuggestedMargin
- **Arguments:** 
  - `margin`: Default collision margin.
- **Usage:** Sets the global suggested collision margin.

## Visualization Setting:

### chrono.ChContactMaterialNSC
- **Arguments:** None
- **Usage:** Creates a contact material object with default properties.

### mfloor.GetVisualShape(0).SetColor
- **Arguments:** 
  - `color`: `chrono.ChColor` object defining RGB color values.
- **Usage:** Sets the color for the first visual shape of the floor object.

### chrono.ChBodyEasyBox
- **Arguments:** 
  - `lengthX`: Length of the box along the X axis.
  - `lengthY`: Length of the box along the Y axis.
  - `lengthZ`: Length of the box along the Z axis.
  - `density`: Density of the box material in kg/m^3.
  - `do_collision`: Boolean indicating if the box participates in collision detection.
  - `do_visualization`: Boolean indicating if the box should be visualized.
  - `contact_material`: Contact material properties.
- **Usage:** Creates a box object with specified dimensions, density, collision, visualization properties, and contact material.

### body_A.GetVisualShape(0).SetColor
- **Arguments:** 
  - `color`: `chrono.ChColor` object defining RGB color values.
- **Usage:** Sets the color for the first visual shape of the body_A object.

### chrono.ChTriangleMeshConnected
- **Arguments:** None
- **Usage:** Creates an object for defining a triangle mesh from connected triangles.

### mesh_for_visualization.LoadWavefrontMesh
- **Arguments:** 
  - `filename`: Path to the .obj file.
- **Usage:** Loads a mesh from a Wavefront .obj file for visualization.

### mesh_for_visualization.Transform
- **Arguments:** 
  - `displacement`: `chrono.ChVector3d` with displacement values.
  - `rotation`: `chrono.ChMatrix33d` with rotation values.
- **Usage:** Transforms the mesh by translating and/or rotating it.

### chrono.ChVisualShapeTriangleMesh
- **Arguments:** None
- **Usage:** Creates a visual shape asset from a triangle mesh.

### visualization_shape.SetMesh
- **Arguments:** 
  - `mesh`: Triangle mesh object.
- **Usage:** Assigns the specified triangle mesh to the visual shape.

### visualization_shape.SetColor
- **Arguments:** 
  - `color`: `chrono.ChColor` object defining RGB color values.
- **Usage:** Sets the color for the visual shape.

### chrono.ChCollisionShapeTriangleMesh
- **Arguments:** 
  - `material`: Contact material.
  - `mesh`: Triangle mesh object.
  - `is_static`: Boolean indicating if the shape is static.
  - `is_convex`: Boolean indicating if the shape is convex.
- **Usage:** Creates a collision shape from a triangle mesh.

### body_B.AddVisualShape
- **Arguments:** 
  - `shape`: Visual shape object.
- **Usage:** Adds a visual shape to the body_B.

### body_B.AddCollisionShape
- **Arguments:** 
  - `shape`: Collision shape object.
- **Usage:** Adds a collision shape to the body_B.

### chrono.ChVisualSystemIrrlicht
- **Arguments:** None
- **Usage:** Creates an Irrlicht visualization system.

### vis.AttachSystem
- **Arguments:** 
  - `system`: ChSystem object.
- **Usage:** Attaches the Irrlicht visualization system to the Chrono simulation system.

### vis.SetWindowSize
- **Arguments:** 
  - `width`: Width of the window.
  - `height`: Height of the window.
- **Usage:** Sets the size of the visualization window.

### vis.SetWindowTitle
- **Arguments:** 
  - `title`: Title of the window.
- **Usage:** Sets the title of the visualization window.

### vis.Initialize
- **Arguments:** None
- **Usage:** Initializes the visualization window.

### vis.AddLogo
- **Arguments:** 
  - `path`: Path to the logo image.
- **Usage:** Adds a logo to the visualization window.

### vis.AddSkyBox
- **Arguments:** None
- **Usage:** Adds a skybox to the visualization environment.

### vis.AddCamera
- **Arguments:** 
  - `position`: `chrono.ChVector3d` object specifying the camera position.
- **Usage:** Adds a camera at the specified position.

### vis.AddTypicalLights
- **Arguments:** None
- **Usage:** Adds typical light sources to the visualization.

## Initialize Body:

### chrono.ChBodyEasyBox
- **See Visualization Setting section for details.**

### mfloor.SetFixed
- **Arguments:** 
  - `fixed`: Boolean indicating if the floor is fixed.
- **Usage:** Sets the floor object as fixed.

### sys.Add
- **Arguments:** 
  - `body`: ChBody object.
- **Usage:** Adds a body to the Chrono system.

### chrono.ChBodyEasyMesh
- **Arguments:** 
  - `filename`: Path to the .obj mesh file.
  - `density`: Density in kg/m^3.
  - `compute_mass`: Boolean to automatically compute mass and inertia.
  - `do_visualization`: Boolean indicating if the object should be visualized.
  - `do_collision`: Boolean indicating if the object participates in collision detection.
  - `contact_material`: Contact material object.
- **Usage:** Creates a body from a .obj mesh file with specified properties.

### body_A.SetPos
- **Arguments:** 
  - `position`: `chrono.ChVector3d` object specifying the position.
- **Usage:** Sets the position of the body_A object.

### chrono.ChBodyAuxRef
- **Arguments:** None
- **Usage:** Creates a body with auxiliary reference frame.

### body_B.SetPos
- **Arguments:** 
  - `position`: `chrono.ChVector3d` object specifying the position.
- **Usage:** Sets the position of the body_B object.

### body_B.SetMass
- **Arguments:** 
  - `mass`: Mass value.
- **Usage:** Sets the mass of the body.

### body_B.SetInertiaXX
- **Arguments:** 
  - `inertiaXX`: `chrono.ChVector3d` object specifying the inertia tensor.
- **Usage:** Sets the inertia tensor of the body_B.

### body_B.SetInertiaXY
- **Arguments:** 
  - `inertiaXY`: `chrono.ChVector3d` object specifying the off-diagonal inertia terms.
- **Usage:** Sets the off-diagonal inertia tensor components for the body_B.

### body_B.SetFrameCOMToRef
- **Arguments:** 
  - `framed`: `chrono.ChFramed` object specifying the frame.
- **Usage:** Sets the frame of the center of mass (COG) with respect to the reference frame for the body_B.

### body_B.EnableCollision
- **Arguments:** 
  - `enable`: Boolean indicating if collision detection should be enabled.
- **Usage:** Enables collision detection for the body_B.

### sys.Add
- **Arguments:**
  - `body`: ChBody object
- **Usage:** Adds a body to the Chrono system.

## Setting Parameters:
- `radius`: Parameter to set the radius for objects (not directly used in the code but could be used for adding spherical objects).
- `density`: Density parameter, e.g., `7000 kg/m^3` for the falling object.
- `initial speeds`: Initial speeds can be set using methods like `SetPos_dt` on ChBody objects (not directly shown in the code but implied by setting the initial position and properties).

## Simulation Loop:

### vis.Run
- **Arguments:** None
- **Usage:** Checks if the visualization system is active and running.

### vis.BeginScene
- **Arguments:** None
- **Usage:** Begins rendering a new scene.

### vis.Render
- **Arguments:** None
- **Usage:** Renders the current scene.

### vis.EndScene
- **Arguments:** None
- **Usage:** Ends the rendering of the current scene.

### sys.DoStepDynamics
- **Arguments:** 
  - `stepsize`: Step size for the dynamics simulation.
- **Usage:** Advances the simulation by the given time step size.

---

This document covers the essential libraries, APIs, functions, and parameters used for setting up and running the provided PyChrono simulation code.