# API Documentation

## Overview
This documentation details the functionalities provided in the provided code example, which demonstrates the use of Project Chrono for quaternion and rotation matrix operations. 

## Library
### Imported Libraries and Modules
1. **pychrono**

   ```python
   import pychrono as chrono
   ```
   
   - This is the main library used for physics simulations and transformations.

2. **os**

   ```python
   import os
   ```
   
   - This module is used for interacting with the operating system.

3. **math**

   ```python
   import math
   ```
   
   - This module is used for mathematical operations.

4. **numpy**

   ```python
   import numpy as np
   from numpy import linalg as LA
   ```

   - NumPy is used for numerical operations and handling arrays.

## Contact and Collision Setting
**Note:** There are no APIs or functions in the provided code related to contact materials or collision settings.

## Visualization Setting
**Note:** There are no APIs or functions in the provided code related to visualization settings.

## Initialize Body
**Note:** There are no APIs or functions in the provided code related to initializing bodies.

## Setting Parameters
**Note:** This section describes the main parameters used in the provided code.

### Parameters
1. **Euler Angles (alpha1, beta1, gamma1, alpha2, beta2, gamma2)**

   ```python
   alpha1 = 10
   beta1 = 11
   gamma1 = 12

   alpha2 = -17.3
   beta2 = -41
   gamma2 = -0.7
   ```
   
   - These variables define the angles used for rotation.

2. **Rotation in Radians**

   ```python
   eu.x = math.pi / 2
   eu.y = math.pi / 2
   eu.z = math.pi / 2
   ```

   - Converts angles from degrees to radians for calculations.

## Simulation Loop
**Note:** There are no APIs or functions in the provided code related to a simulation loop, solver settings, or rendering steps.

## API Descriptions

### ^1chrono.ChQuaterniond
#### Arguments
- `None`

#### Usage
- Creates a new quaternion object for handling rotations.

#### Example
```python
q = chrono.ChQuaterniond()
```

### ^2chrono.ChVector3d
#### Arguments
- `None`

#### Usage
- Creates a 3D vector object to store Euler angles and other 3-dimensional vectors.

#### Example
```python
eu = chrono.ChVector3d()
```

### ^3chrono.CH_DEG_TO_RAD
#### Arguments
- `None`

#### Usage
- A constant used to convert degrees to radians.

#### Example
```python
radians = chrono.CH_DEG_TO_RAD * degrees
```

### ^4q.SetFromAngleX
#### Arguments
- `float angle`

#### Usage
- Sets the quaternion `q` to represent a rotation around the X-axis by the specified angle (in radians).

#### Example
```python
q.SetFromAngleX(chrono.CH_DEG_TO_RAD * alpha1)
```

### ^5q.GetCardanAnglesXYZ
#### Arguments
- `None`

#### Usage
- Retrieves the Cardan angles (XYZ rotation sequence) corresponding to the quaternion.

#### Example
```python
eu = q.GetCardanAnglesXYZ() * chrono.CH_RAD_TO_DEG
```

### ^6q.SetFromAngleY
#### Arguments
- `float angle`

#### Usage
- Sets the quaternion `q` to represent a rotation around the Y-axis by the specified angle (in radians).

#### Example
```python
q.SetFromAngleY(chrono.CH_DEG_TO_RAD * beta1)
```

### ^7q.SetFromAngleZ
#### Arguments
- `float angle`

#### Usage
- Sets the quaternion `q` to represent a rotation around the Z-axis by the specified angle (in radians).

#### Example
```python
q.SetFromAngleZ(chrono.CH_DEG_TO_RAD * gamma1)
```

### ^8q.SetFromCardanAnglesXYZ
#### Arguments
- `ChVector3d euler_angles`

#### Usage
- Sets the quaternion `q` using the specified Euler angles (in radians, XYZ rotation sequence).

#### Example
```python
q.SetFromCardanAnglesXYZ(eu * chrono.CH_DEG_TO_RAD)
```

### ^9chrono.ChMatrix33d
#### Arguments
- `ChQuaterniond q`

#### Usage
- Creates a 3x3 rotation matrix from the quaternion `q`.

#### Example
```python
R = chrono.ChMatrix33d(q)
```

### ^10R.GetMatr
#### Arguments
- `None`

#### Usage
- Retrieves the 3x3 matrix from the `ChMatrix33d` object as a list.

#### Example
```python
npmat = np.asarray(R.GetMatr())
```

### ^11np.set_printoptions
#### Arguments
- `**kwargs`

  - `suppress`: If True, small numbers are represented using regular numerical notation rather than scientific notation.

#### Usage
- Sets display options for NumPy arrays.

#### Example
```python
np.set_printoptions(suppress=True)
```

## Summary
The code example primarily demonstrates how to work with quaternions and Euler angles using the Project Chrono library. The operations include converting Euler angles to quaternions, extracting Cardan angles from quaternions, and converting quaternions to rotation matrices.