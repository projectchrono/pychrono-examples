# API Documentation 

## Library

### Libraries and Modules
- **pychrono.core**: Provides core functionalities for creating and managing physical systems in Project Chrono.
- **pychrono.irrlicht**: Provides functionalities for visualizing the simulation using the Irrlicht Engine.

```python
import pychrono.core as chrono
import pychrono.irrlicht as chronoirr
```

## Contact and Collision Setting

### ChSystemNSC
**Name**: `ChSystemNSC()`
**Arguments**: None
**Usage**: 
Creates a new instance of the non-smooth contact (NSC) simulation system. This system manages the physical simulation world.

```python
sys = chrono.ChSystemNSC()
```

### ChBody
**Name**: `ChBody()`
**Arguments**: None
**Usage**:
Creates a new rigid body in the simulation.

```python
mbody1 = chrono.ChBody()
```

### ChVector3d
**Name**: `ChVector3d(x, y, z)`
**Arguments**:
  - `x` (float): x-coordinate
  - `y` (float): y-coordinate
  - `z` (float): z-coordinate
**Usage**:
Creates a 3D vector used for positioning and other vector operations.

```python
chrono.ChVector3d(0, 0, -0.2)
```

### SetFixed
**Name**: `SetFixed(fixed)`
**Arguments**:
  - `fixed` (boolean): Whether the body is fixed in space or not.
**Usage**:
Sets whether the rigid body is fixed (immovable) in the world.

```python
mbody1.SetFixed(True)
```

### SetPos
**Name**: `SetPos(position)`
**Arguments**:
  - `position` (ChVector3d): The position vector to set.
**Usage**:
Sets the position of the rigid body in the world space.

```python
mbody1.SetPos(chrono.ChVector3d(0, 0, -0.2))
```

### Add
**Name**: `Add(object)`
**Arguments**:
  - `object` (object): The object to add to the system (e.g., bodies, constraints).
**Usage**:
Adds an object (e.g., body or link) to the simulation system.

```python
sys.Add(mbody1)
```

## Visualization Setting

### ChVisualShapeBox
**Name**: `ChVisualShapeBox(width, height, depth)`
**Arguments**:
  - `width` (float): Width of the box.
  - `height` (float): Height of the box.
  - `depth` (float): Depth of the box.
**Usage**:
Creates a box-shaped visual asset that can be attached to a rigid body for visualization purposes.

```python
mboxasset = chrono.ChVisualShapeBox(0.4, 1.0, 0.2)
```

### AddVisualShape
**Name**: `AddVisualShape(visual_shape)`
**Arguments**:
  - `visual_shape` (ChVisualShape): The visual shape to add.
**Usage**:
Attaches a visual shape (asset) to the rigid body for visualization purposes.

```python
mbody1.AddVisualShape(mboxasset)
```

### ChVisualSystemIrrlicht
**Name**: `ChVisualSystemIrrlicht()`
**Arguments**: None
**Usage**:
Creates an instance of the Irrlicht visualization system to render the physical simulation.

```python
vis = chronoirr.ChVisualSystemIrrlicht()
```

### AttachSystem
**Name**: `AttachSystem(system)`
**Arguments**:
  - `system` (ChSystemNSC): The simulation system to attach for visualization.
**Usage**:
Connects the visualization system to the physical simulation system.

```python
vis.AttachSystem(sys)
```

### SetWindowSize
**Name**: `SetWindowSize(width, height)`
**Arguments**:
  - `width` (int): Width of the window in pixels.
  - `height` (int): Height of the window in pixels.
**Usage**:
Sets the size of the visualization window.

```python
vis.SetWindowSize(1024, 768)
```

### SetWindowTitle
**Name**: `SetWindowTitle(title)`
**Arguments**:
  - `title` (str): The title of the window.
**Usage**:
Sets the title displayed in the visualization window.

```python
vis.SetWindowTitle('Revolute joint demo')
```

### Initialize
**Name**: `Initialize()`
**Arguments**: None
**Usage**:
Initializes the visualization system, setting up necessary resources and configurations.

```python
vis.Initialize()
```

### AddLogo
**Name**: `AddLogo(texture_file)`
**Arguments**:
  - `texture_file` (str): Path to the logo image file.
**Usage**:
Adds a logo image to the visualization window.

```python
vis.AddLogo(chrono.GetChronoDataFile('logo_pychrono_alpha.png'))
```

### AddSkyBox
**Name**: `AddSkyBox()`
**Arguments**: None
**Usage**:
Adds a skybox to the visualization environment to simulate the sky.

```python
vis.AddSkyBox()
```

### AddCamera
**Name**: `AddCamera(position)`
**Arguments**:
  - `position` (ChVector3d): Position of the camera in the 3D space.
**Usage**:
Adds a camera to the visualization, specifying its position.

```python
vis.AddCamera(chrono.ChVector3d(0.6, 0.6, 0.8))
```

### AddTypicalLights
**Name**: `AddTypicalLights()`
**Arguments**: None
**Usage**:
Adds typical lights (e.g., ambient light, point lights) to the visualization scene.

```python
vis.AddTypicalLights()
```

## Initialize Body 

### SetFixed
**Name**: `SetFixed(fixed)`
**Arguments**:
 - `fixed` (boolean): Whether the body is fixed in space or not.
**Usage**:
Sets whether the rigid body is fixed (immovable) in the world.

```python
mbody1.SetFixed(True)
```

### SetPos
**Name**: `SetPos(position)`
**Arguments**:
 - `position` (ChVector3d): The position vector to set.
**Usage**:
Sets the position of the rigid body in the world space.

```python
mbody1.SetPos(chrono.ChVector3d(0, 0, -0.2))
```

### Add
**Name**: `Add(object)`
**Arguments**:
 - `object` (object): The object to add to the system (e.g., bodies, constraints).
**Usage**:
Adds an object (e.g., body or link) to the simulation system.

```python
sys.Add(mbody1)
```


### ChLinkRevolute
**Name**: `ChLinkRevolute()`
**Arguments**: None
**Usage**:
Creates a revolute constraint (hinge) that can be used to connect two rigid bodies and allow rotation about one axis.

```python
mlink = chrono.ChLinkRevolute()
```

### ChFramed
**Name**: `ChFramed(frame_vector)`
**Arguments**:
  - `frame_vector` (ChVector3d): The frame's reference position in absolute space.
**Usage**:
Creates a frame (coordinate system) for the revolute constraint in the given absolute position.

```python
mframe = chrono.ChFramed(chrono.ChVector3d(0.1, 0.5, 0))
```

### Initialize
**Name**: `Initialize(body1, body2, frame)`
**Arguments**:
  - `body1` (ChBody): The first rigid body to connect.
  - `body2` (ChBody): The second rigid body to connect.
  - `frame` (ChFramed): The frame used to define the revolute joint's position and orientation.
**Usage**:
Initializes the revolute joint, specifying the bodies to connect and the frame of reference.

```python
mlink.Initialize(mbody1, mbody2, mframe)
```

### ChVisualShapeBox
**Name**: `ChVisualShapeBox(width, height, depth)`
**Arguments**:
  - `width` (float): Width of the box.
  - `height` (float): Height of the box.
  - `depth` (float): Depth of the box.
**Usage**:
Creates a box-shaped visual asset that can be attached to a rigid body for visualization purposes.

```python
mboxasset = chrono.ChVisualShapeBox(0.4, 1.0, 0.2)
```

### SetTexture
**Name**: `SetTexture(texture_file)`
**Arguments**:
- `texture_file` (str): Path to texture file to apply on the visual shape.
**Usage**:
Apply a texture from the specified file to the visual shape.

```python
mboxasset.SetTexture(chrono.GetChronoDataFile('textures/concrete.jpg'))
```

### Add
**Name**: `Add(object)`
**Arguments**:
 - `object` (object): The object to add to the system (e.g., bodies, constraints).
**Usage**:
Adds an object (e.g., body or link) to the simulation system.

```python
sys.Add(mlink)
```

### AddVisualShape
**Name**: `AddVisualShape(visual_shape)`
**Arguments**:
  - `visual_shape` (ChVisualShape): The visual shape to add.
**Usage**:
Attaches a visual shape (asset) to the rigid body for visualization purposes.

```python
mbody2.AddVisualShape(mboxasset)
```

## Setting Parameters

```python
radius = 0.4
density = 1.0
initial_speeds = chrono.ChVector3d(0, 0, -0.2)
```

## Simulation Loop

### Run
**Name**: `Run()`
**Arguments**: None
**Usage**:
Checks if the visualization system is still running. Used for maintaining the simulation loop.

```python
while vis.Run():
```

### BeginScene
**Name**: `BeginScene()`
**Arguments**: None
**Usage**:
Marks the beginning of the rendering process for a new frame.

```python
vis.BeginScene()
```

### Render
**Name**: `Render()`
**Arguments**: None
**Usage**:
Triggers the rendering of the current frame.

```python
vis.Render()
```

### EndScene
**Name**: `EndScene()`
**Arguments**: None
**Usage**:
Marks the end of the rendering process for the current frame.

```python
vis.EndScene()
```

### DoStepDynamics
**Name**: `DoStepDynamics(time_step)`
**Arguments**:
  - `time_step` (float): The time step size for the dynamics simulation.
**Usage**:
Advances the simulation by the specified time step, solving dynamics equations.

```python
sys.DoStepDynamics(5e-3)
```

By understanding and using these API functions and methods, users can recreate, visualize, and control physical simulations in the Project Chrono framework.