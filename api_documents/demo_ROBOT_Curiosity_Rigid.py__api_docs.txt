# API Documentation for Curiosity Rover Simulation

### Library

**Libraries and Modules Used:**
1. `os` - Miscellaneous operating system interfaces.
2. `math` - Mathematical functions.
3. `numpy` as `np` - Support for large, multi-dimensional arrays and matrices.
4. `pychrono` as `chrono` - Project Chrono main module for physics-based simulation.
5. `pychrono.robot` as `robot` - Project Chrono module for robotics-related functionalities.
6. `pychrono.irrlicht` as `chronoirr` - Visualization module utilizing the Irrlicht 3D engine.

### Contact and Collision Setting

**APIs and Functions:**

1. **`chrono.ChSystemNSC()`**
    - **Arguments:** None
    - **Usage:** Creates a new Chrono system using non-smooth contact (NSC) material.

2. **`system.SetCollisionSystemType(type)`**
    - **Arguments:**
        - `type` (Type): Type of the collision system (e.g., `chrono.ChCollisionSystem.Type_BULLET`)
    - **Usage:** Sets the collision system for the Chrono system.

3. **`system.SetGravitationalAcceleration(acceleration)`**
    - **Arguments:**
        - `acceleration` (ChVector3d): Vector setting the gravitational acceleration.
    - **Usage:** Sets the gravitational acceleration of the system.

4. **`chrono.ChCollisionModel.SetDefaultSuggestedEnvelope(env)`**
    - **Arguments:**
        - `env` (float): Suggested envelope margin for collision detection.
    - **Usage:** Sets the default suggested envelope for collision detection.

5. **`chrono.ChCollisionModel.SetDefaultSuggestedMargin(margin)`**
    - **Arguments:**
        - `margin` (float): Suggested collision margin.
    - **Usage:** Sets the default suggested margin for collision detection.

6. **`chrono.ChContactMaterialNSC()`**
    - **Arguments:** None
    - **Usage:** Creates a default non-smooth contact material for the ground.

7. **`chrono.ChBodyEasyBox(x, y, z, density, collide, visualize, contact_material)`**
    - **Arguments:**
        - `x`, `y`, `z` (float): Dimensions of the box.
        - `density` (float): The density of the box material.
        - `collide` (bool): Whether the box should be collidable.
        - `visualize` (bool): Whether the box should be visualized.
        - `contact_material` (ChContactMaterialNSC): Material for the contact surface.
    - **Usage:** Creates a box body for simulation with easy settings.

8. **`ground.SetPos(position)`**
    - **Arguments:**
        - `position` (ChVector3d): The position vector to set the ground's position.
    - **Usage:** Sets the position of the ground body.

9. **`ground.SetFixed(is_fixed)`**
    - **Arguments:**
        - `is_fixed` (bool): If true, the ground will be fixed and not move.
    - **Usage:** Fixes the ground into position.

10. **`ground.GetVisualShape(index).SetTexture(texture_path)`**
    - **Arguments:**
        - `index` (int): Index of the visual shape.
        - `texture_path` (str): Path to the texture file.
    - **Usage:** Sets a texture to the visual appearance of the ground.

### Visualization Setting

**APIs and Functions:**

1. **`chronoirr.ChVisualSystemIrrlicht()`**
    - **Arguments:** None
    - **Usage:** Creates a visualization system using the Irrlicht engine.

2. **`vis.AttachSystem(system)`**
    - **Arguments:**
        - `system` (ChSystem): The physical simulation system to visualize.
    - **Usage:** Attaches the visualization system to a physical simulation system.

3. **`vis.SetCameraVertical(vertical_dir)`**
    - **Arguments:**
        - `vertical_dir` (CameraVerticalDir): Enum setting the vertical direction for the camera.
    - **Usage:** Sets the vertical direction for the visualization camera.

4. **`vis.SetWindowSize(width, height)`**
    - **Arguments:**
        - `width` (int): Width of the window.
        - `height` (int): Height of the window.
    - **Usage:** Sets the window size for the visualization.

5. **`vis.SetWindowTitle(title)`**
    - **Arguments:**
        - `title` (str): Title of the window.
    - **Usage:** Sets the title for the window.

6. **`vis.Initialize()`**
    - **Arguments:** None
    - **Usage:** Initializes the visualization system.

7. **`vis.AddLogo(logo_path)`**
    - **Arguments:**
        - `logo_path` (str): Path to the logo image file.
    - **Usage:** Adds a logo to the visualization window.

8. **`vis.AddSkyBox()`**
    - **Arguments:** None
    - **Usage:** Adds a skybox to the visualization environment.

9. **`vis.AddCamera(camera_position, camera_target)`**
    - **Arguments:**
        - `camera_position` (ChVector3d): Position vector of the camera.
        - `camera_target` (ChVector3d): Target point the camera looks at.
    - **Usage:** Adds a camera to the visualization environment.

10. **`vis.AddTypicalLights()`**
    - **Arguments:** None
    - **Usage:** Adds typical lights to the visualization to enhance visibility.

11. **`vis.AddLightWithShadow(position, target, radius, max_depth, min_depth, near_distance, shadow_map_size)`**
    - **Arguments:**
        - `position` (ChVector3d): Position of the light.
        - `target` (ChVector3d): The target point where the light is directed.
        - `radius` (float): Radius of the light sphere.
        - `max_depth` (float): Maximum depth for shadows.
        - `min_depth` (float): Minimum depth for shadows.
        - `near_distance` (float): Near distance limit for the light's effect.
        - `shadow_map_size` (int): Shadow map resolution.
    - **Usage:** Adds a light with shadow effects to the visualization.

### Initialize Body

**APIs and Functions:**

1. **`robot.CuriosityDCMotorControl()`**
    - **Arguments:** None
    - **Usage:** Creates a driver control interface for the Curiosity rover.

2. **`robot.Curiosity(system)`**
    - **Arguments:**
        - `system` (ChSystem): The physical simulation system.
    - **Usage:** Creates the Curiosity rover model and adds it to the system.

3. **`rover.SetDriver(driver)`**
    - **Arguments:**
        - `driver` (CuriosityDCMotorControl): Driver interface for the rover.
    - **Usage:** Sets the driver control for the rover.

4. **`rover.Initialize(frames)`**
    - **Arguments:**
        - `frames` (ChFrameMoving): Configuration frame for initial position and orientation.
    - **Usage:** Initializes the rover model with given position and orientation.

### Setting Parameters

1. **Global Parameters:**
    - **`time_step` (float):** Time step for each simulation iteration. Set to `1e-3`.

### Simulation Loop

**APIs and Functions:**

1. **`vis.Run()`**
    - **Arguments:** None
    - **Usage:** Checks if the visualization is running and allows for continuation of the loop.

2. **`driver.SetSteering(steering)`**
    - **Arguments:**
        - `steering` (float): Steering angle value.
    - **Usage:** Sets the steering angle of the Curiosity rover.

3. **`rover.Update()`**
    - **Arguments:** None
    - **Usage:** Updates the rover model for the current simulation step.

4. **`vis.BeginScene()`**
    - **Arguments:** None
    - **Usage:** Prepares the visualization system to begin rendering a new scene.

5. **`vis.Render()`**
    - **Arguments:** None
    - **Usage:** Renders the current scene to the visualization window.

6. **`vis.EndScene()`**
    - **Arguments:** None
    - **Usage:** Finalizes the rendering of the current scene and presents it to the window.

7. **`system.DoStepDynamics(time_step)`**
    - **Arguments:**
        - `time_step` (float): The time step for the simulation dynamics.
    - **Usage:** Advances the physical simulation by a single time step.

This documentation captures all the API calls, functions, and parameters used in the provided Curiosity Rover simulation code using the Project Chrono framework.