# API Documentation

## Library

### Imported Libraries
- **chrono.core**: Provides the core functionalities of projectchrono such as body creation, system simulation, collision shapes, and materials.
- **chrono.irrlicht**: Provides functionalities for visualization using the Irrlicht engine.

```python
import pychrono.core as chrono
import pychrono.irrlicht as chronoirr
```

## Contact and Collision Setting

### `chrono.ChContactMaterialSMC`
**Arguments**: None
- **Usage**: Creates a contact material with SMC (Signorini-Moreau Contact) properties.

### `chrono.ChVector3d`
**Arguments**:
- `x`, `y`, `z`: Coordinates for the vector.
- **Usage**: Creates a 3-dimensional vector. Used for defining positions, velocities, and sizes.

### `chrono.ChCollisionShapeSphere`
**Arguments**:
- `material`: Contact material for the shape.
- `radius`: Radius of the sphere.
- **Usage**: Defines a spherical collision shape.

### `chrono.ChCollisionShapeBox`
**Arguments**:
- `material`: Contact material for the shape.
- `x`, `y`, `z`: Dimensions of the box.
- **Usage**: Defines a box collision shape.

### `body.AddCollisionShape`
**Arguments**:
- `shape`: The collision shape to be added.
- **Usage**: Adds the specified collision shape to a body for contact detection.

### `body.EnableCollision`
**Arguments**:
- `enabled`: Boolean to enable or disable collision for the body.
- **Usage**: Enables or disables collision detection for the body.

### `chrono.ChFramed`
**Arguments**:
- `pos`: Position of the frame.
- `quat`: Quaternion for the rotation.
- **Usage**: Defines a framed reference for the collision shapes and visual shapes.

## Visualization Setting

### `chrono.ChVisualShapeSphere`
**Arguments**:
- `radius`: Radius of the sphere.
- **Usage**: Defines a spherical visual shape.

### `chrono.GetChronoDataFile`
**Arguments**:
- `filepath`: Path to the file within the Chrono data directory.
- **Usage**: Retrieves the file path relative to the Chrono data directory for textures or other assets.

### `chrono.ChVisualShapeBox`
**Arguments**:
- `size`: A vector defining the dimensions of the box.
- **Usage**: Defines a box visual shape.

### `body.AddVisualShape`
**Arguments**:
- `visual_shape`: The visual shape to be added.
- `frame`: (Optional) Framed reference for the visual shape.
  - **Usage**: Adds the specified visual shape to a body for visualization.

### `chronoirr.ChVisualSystemIrrlicht`
**Arguments**: None
- **Usage**: Creates a visualization system using Irrlicht engine.

### `vis.AttachSystem`
**Arguments**:
- `sys`: The Chrono simulation system to attach.
- **Usage**: Links the visualization system with the simulation system.

### `vis.SetWindowSize`
**Arguments**:
- `width`: Width of the window.
- `height`: Height of the window.
- **Usage**: Sets the resolution of the visualization window.

### `vis.SetWindowTitle`
**Arguments**:
- `title`: Title of the window.
- **Usage**: Sets the title of the visualization window.

### `vis.Initialize`
**Arguments**: None
- **Usage**: Initializes the visualization system.

### `vis.AddLogo`
**Arguments**:
- `logo_filepath`: Path to the logo file.
- **Usage**: Adds a logo to the visualization window.

### `vis.AddSkyBox`
**Arguments**: None
- **Usage**: Adds a skybox background to the visualization.

### `vis.AddCamera`
**Arguments**:
- `pos`: Position of the camera.
- **Usage**: Adds a camera to the visualization.

### `vis.AddTypicalLights`
**Arguments**: None
- **Usage**: Adds typical lighting to the scene.

## Initialize Body

### `chrono.ChBody`
**Arguments**: None
- **Usage**: Creates a new rigid body.

### `body.SetInertiaXX`
**Arguments**:
- `inertia_vector`: Inertia tensor diagonal elements.
- **Usage**: Sets the inertia tensor for the body.

### `body.SetMass`
**Arguments**:
- `mass`: Mass of the body.
- **Usage**: Sets the mass of the body.

### `body.SetPos`
**Arguments**:
- `pos`: Position of the body.
- **Usage**: Sets the initial position of the body.

### `sys.AddBody`
**Arguments**:
- `body`: The rigid body to be added.
- **Usage**: Adds the body to the simulation system.

### `chrono.ChLinkMotorRotationSpeed`
**Arguments**: None
- **Usage**: Creates a rotational speed motor link between two bodies.

### `my_motor.Initialize`
**Arguments**:
- `body_1`: The rotating body.
- `body_2`: The fixed body.
- `frame`: The framed reference for the motor.
- **Usage**: Initializes the motor link.

### `chrono.ChFunctionConst`
**Arguments**:
- `value`: The constant value (speed in this context).
- **Usage**: Creates a constant function for the motor speed.

### `my_motor.SetSpeedFunction`
**Arguments**:
- `func`: The function defining the speed.
- **Usage**: Sets the speed function for the motor.

### `sys.AddLink`
**Arguments**:
- `link`: The link to be added to the system.
- **Usage**: Adds a link (constraints) to the simulation system.

## Setting Parameters

### Parameters Used
- **radius**: Radius of the spherical bodies.
- **density**: Density of the rotating mixer.
- **initial speeds**: Initial speeds set for the motor.

### Time Step
- **time_step = 1e-4**
- **Usage**: Duration of each timestep in the simulation loop.

### Output Step
- **out_step = 1.0 / 20**
- **Usage**: Time interval between rendering frames.

## Simulation Loop

### `sys.DoStepDynamics`
**Arguments**:
- `time_step`: Duration of the timestep.
- **Usage**: Advances the simulation by a single timestep.

### `sys.GetChTime`
**Arguments**: None
- **Usage**: Retrieves the current simulation time.

### `vis.Run`
**Arguments**: None
- **Usage**: Run the visualization system.

### `vis.BeginScene`
**Arguments**: None
- **Usage**: Begins the rendering of a new scene.

### `vis.Render`
**Arguments**: None
- **Usage**: Renders the current scene.

### `vis.EndScene`
**Arguments**: None
- **Usage**: Ends the rendering of the current scene.

### Example Simulation Loop
```python
while vis.Run():
    sys.DoStepDynamics(time_step)
    time = sys.GetChTime()
    if (time >= out_time):
        vis.BeginScene() 
        vis.Render()
        vis.EndScene()
        out_time += out_step
```

This documentation includes all the API functions and parameters used in the provided code for setting up the simulation, adding bodies, visualization, and running the simulation loop.