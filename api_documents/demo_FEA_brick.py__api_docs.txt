# API Documentation for Brick Elements Demo with Implicit Integration

## 1. Library

### Imported Libraries and Modules

- `import math as m`: This is the standard Python math library. It's used for mathematical functions like floor.
  
- `import pychrono as chrono`: This is the main PyChrono library which is used for the physics simulation.
  
- `import pychrono.fea as fea`: This is an extension of the PyChrono library specific for Finite Element Analysis (FEA).

- `import pychrono.irrlicht as chronoirr`: This is an extension of the PyChrono library that integrates with the Irrlicht visualization engine.

- `import numpy as np`: This is the standard NumPy library and is used for numerical operations, especially with arrays.

## 2. Contact and Collision Setting

### No specific functions or APIs related to contact materials and collision shapes are used in this code.

## 3. Visualization Setting

### mvisualizemeshref.SetFEMdataType(...)

- **Arguments**: `chrono.ChVisualShapeFEA.DataType_SURFACE`
- **Usage**: Sets the FEM data type to be visualized, here it is set to visualize the surface.

### mvisualizemeshref.SetWireframe(...)

- **Arguments**: `True`
- **Usage**: Sets the visualization mode to wireframe.

### mvisualizemeshref.SetDrawInUndeformedReference(...)

- **Arguments**: `True`
- **Usage**: Sets visualization to draw in undeformed reference.

### mvisualizemeshC.SetFEMglyphType(...)

- **Arguments**: `chrono.ChVisualShapeFEA.GlyphType_NODE_DOT_POS`
- **Usage**: Sets the glyph type for visualization to node dot positions.

### mvisualizemeshC.SetSymbolsThickness(...)

- **Arguments**: `0.015`
- **Usage**: Sets the thickness of the symbols in the visualization.

### mvisualizemeshD.SetFEMglyphType(...)

- **Arguments**: `chrono.ChVisualShapeFEA.GlyphType_NONE`
- **Usage**: Sets the glyph type for visualization to none.

### mvisualizemeshD.SetFEMdataType(...)

- **Arguments**: `chrono.ChVisualShapeFEA.DataType_SURFACE`
- **Usage**: Sets the FEM data type for visualization to surface data.

### mvisualizemeshD.SetSymbolsScale(...)

- **Arguments**: `1`
- **Usage**: Sets the scale of symbols in the visualization.

### mvisualizemeshD.SetColorscaleMinMax(...)

- **Arguments**: `-0.5, 5`
- **Usage**: Sets the color scale range for the visualization.

### mvisualizemeshD.SetZbufferHide(...)

- **Arguments**: `False`
- **Usage**: Sets z-buffer hiding to false.

### vis.Initialize(...)

- **Arguments**: None
- **Usage**: Initializes the visualization window.

### vis.AddLogo(...)

- **Arguments**: `chrono.GetChronoDataFile('logo_pychrono_alpha.png')`
- **Usage**: Adds a logo to the visualization window.

### vis.AddSkyBox(...)

- **Arguments**: None
- **Usage**: Adds a skybox to the visualization.

### vis.AddCamera(...)

- **Arguments**: `chrono.ChVector3d(1.2, 0.6, 0.3), chrono.ChVector3d(0.2, -0.2, 0)`
- **Usage**: Adds a camera to the visualization at specified positions.

### vis.AddTypicalLights(...)

- **Arguments**: None
- **Usage**: Adds typical lighting to the visualization.

## 4. Initialize Body

### sys = chrono.ChSystemSMC()

- **Arguments**: None
- **Usage**: Creates the main physical system which will contain all physical objects.

### mesh = fea.ChMesh()

- **Arguments**: None
- **Usage**: Creates a mesh, which is a container for groups of elements and their referenced nodes.

### fea.ChNodeFEAxyz(...)

- **Arguments**: `chrono.ChVector3d(COORDFlex[i, 0], COORDFlex[i, 1], COORDFlex[i, 2])`
- **Usage**: Creates a new node at specified coordinates.

### fea.CastToChNodeFEAxyz(...)

- **Arguments**: `fea.CastToChNodeFEAbase(mesh.GetNode(TotalNumNodes - 1))`
- **Usage**: Typecasts a node to `ChNodeFEAxyz`.

### fea.ChElementHexaANCF_3813(...)

- **Arguments**: None
- **Usage**: Creates a new hexahedral element.

### element.SetInertFlexVec(...)

- **Arguments**: `chrono.ChVector3d(ElemLengthXY[elemcount, 0], ElemLengthXY[elemcount, 1], ElemLengthXY[elemcount, 2])`
- **Usage**: Sets inertia flexible vector for the element.

### element.SetNodes(...):

- **Arguments**: List of node objects
- **Usage**: Sets the nodes for the element.

### element.SetMaterial(...):

- **Arguments**: `mmaterial`
- **Usage**: Sets the material properties for the element.

### sys.Add(...):

- **Arguments**: `mesh`
- **Usage**: Adds the mesh to the physical system.

## 5. Setting Parameters

### MPROP[i, 0] = 500

- **Usage**: Sets density of the material.

### MPROP[i, 1] = 2.1E+05

- **Usage**: Sets another property, likely Young's Modulus.

### MPROP[i, 2] = 0.3

- **Usage**: Sets Poisson's ratio.

### mmaterial.SetRayleighDampingBeta(...)

- **Arguments**: `0.0`
- **Usage**: Sets Rayleigh damping beta to zero.

### mmaterial.SetRayleighDampingAlpha(...)

- **Arguments**: `0.0`
- **Usage**: Sets Rayleigh damping alpha to zero.

### mmaterial.SetDensity(...)

- **Arguments**: `MPROP[0, 0]`
- **Usage**: Sets the density for the material.

## 6. Simulation Loop

### mystepper = chrono.ChTimestepperHHT(sys):

- **Arguments**: `sys`
- **Usage**: Creates the HHT integrator for the system.

### sys.SetTimestepper(...)

- **Arguments**: `mystepper`
- **Usage**: Sets the time integrator for the system.

### mystepper.SetAlpha(...)

- **Arguments**: `-0.2`
- **Usage**: Sets the alpha parameter for the HHT integrator.

### mystepper.SetMaxIters(...)

- **Arguments**: `100`
- **Usage**: Sets maximum iterations for the stepper.

### mystepper.SetAbsTolerances(...)

- **Arguments**: `1e-2`
- **Usage**: Sets absolute tolerances for the integrator.

### sys.SetSolver(...)

- **Arguments**: `solver`
- **Usage**: Sets the solver for the system.

### solver.SetMaxIterations(...)

- **Arguments**: `1000`
- **Usage**: Sets maximum iterations for the solver.

### solver.SetTolerance(...)

- **Arguments**: `1e-10`
- **Usage**: Sets the tolerance for the solver.

### solver.EnableDiagonalPreconditioner(...)

- **Arguments**: `True`
- **Usage**: Enables diagonal preconditioner in the solver.

### solver.SetVerbose(...)

- **Arguments**: `False`
- **Usage**: Disables verbose output from the solver.

### sys.DoStepDynamics(...)

- **Arguments**: `0.004`
- **Usage**: Advances the dynamics of the system by the given time step.

### vis.BeginScene(...)

- **Arguments**: None
- **Usage**: Begins rendering the scene.

### vis.Render(...)

- **Arguments**: None
- **Usage**: Renders the current scene.

### vis.EndScene(...)

- **Arguments**: None
- **Usage**: Ends rendering of the scene and displays it.
  
This guide should help users understand how to use the APIs and functions within the provided code segment for setting up the physical system, defining material and elements, adding visualization, and managing the simulation loop.