# API Documentation for the Provided Code

## Library
The following libraries and modules are imported and used in the code:

### Libraries and Modules:
1. **pychrono**: The main library providing functionalities for physics-based simulations.
2. **pychrono.fea**: A module for finite element analysis.
3. **pychrono.irrlicht**: A module for visualization using the Irrlicht Engine.
4. **cables**: A custom module (assumed as provided) containing predefined models (`Model1`, `Model2`, `Model3`).

## Contact and Collision Setting

### API: `chrono.ChSystemSMC()`
- **Arguments**: None
- **Usage**: Initializes a system using the SMC (smooth contact) method for handling collisions and contacts.

### API: `sys.Add(mesh)`
- **Arguments**: 
  - `mesh`: The `ChMesh` object which includes the finite element analysis elements.
- **Usage**: Adds the mesh to the physical system for collision detection and simulation.

## Visualization Setting

### APIs and Functions:

#### API: `chrono.ChVisualShapeFEA(mesh)`
- **Arguments**: 
  - `mesh`: The finite element mesh to visualize.
- **Usage**: Creates a visualization shape for a finite element mesh.

#### API: `visualizebeamA.SetFEMdataType(fem_data_type)`
- **Arguments**: 
  - `fem_data_type`: Specifies the type of FEM data to visualize (e.g., beam element MZ).
- **Usage**: Sets the type of FEM data that will be visualized for the first visualization shape.

#### API: `visualizebeamA.SetColorscaleMinMax(min, max)`
- **Arguments**: 
  - `min`: Minimum value of the color scale.
  - `max`: Maximum value of the color scale.
- **Usage**: Sets the minimum and maximum values for the color scale in the visualization.

#### API: `visualizebeamA.SetSmoothFaces(enable)`
- **Arguments**: 
  - `enable`: Boolean, whether to enable smooth faces.
- **Usage**: Enables or disables smooth faces for the visualization.

#### API: `visualizebeamA.SetWireframe(enable)`
- **Arguments**: 
  - `enable`: Boolean, whether to enable wireframe.
- **Usage**: Enables or disables wireframe mode for the visualization.

#### API: `mesh.AddVisualShapeFEA(visualizebeamA)`
- **Arguments**: 
  - `visualizebeamA`: The visualization shape to add.
- **Usage**: Adds the visualization shape to the finite element mesh.

#### API: `visualizebeamB.SetFEMglyphType(glyph_type)`
- **Arguments**: 
  - `glyph_type`: The type of glyph to use for visualization (e.g., NODE_DOT_POS).
- **Usage**: Sets the type of glyph to use in the second visualization shape.

#### API: `visualizebeamB.SetFEMdataType(data_type)`
- **Arguments**: 
  - `data_type`: Specifies the type of data to visualize (e.g., no data).
- **Usage**: Sets the FEM data type to visualize for the second visualization shape.

#### API: `visualizebeamB.SetSymbolsThickness(thickness)`
- **Arguments**: 
  - `thickness`: Thickness of the symbols in the visualization.
- **Usage**: Sets the thickness of glyphs used for visualization.

#### API: `visualizebeamB.SetSymbolsScale(scale)`
- **Arguments**: 
  - `scale`: Scale of the symbols in the visualization.
- **Usage**: Sets the scale for the glyphs used in the visualization.

#### API: `visualizebeamB.SetZbufferHide(enable)`
- **Arguments**: 
  - `enable`: Boolean, whether to enable Z-buffer hiding.
- **Usage**: Enables or disables Z-buffer hiding for the visualization glyphs.

## Initialize Body

### API: `mesh = fea.ChMesh()`
- **Arguments**: None
- **Usage**: Initializes an empty mesh for finite element analysis.

### API: `Model3(sys, mesh)`
- **Arguments**:
  - `sys`: The physical system to add the model to.
  - `mesh`: The mesh to add the finite elements to.
- **Usage**: Initializes one of the predefined models for the simulation.

### API: `sys.Add(mesh)`
- **Arguments**: 
  - `mesh`: The `ChMesh` object.
- **Usage**: Adds the mesh containing finite element elements to the physical system.

## Setting Parameters

### Parameters in the code:
- **solver_type**: The variable to select solver type, though not utilized in the provided code.
- **solver**: An instance of `ChSolverSparseQR()` which is one of the solver types.
- **window_size**: `(1024, 768)` selects the size of the visualization window.
- **window_title**: `'FEA cables'` sets the title of the visualization window.
- **camera_position**: `chrono.ChVector3d(0, 0.6, -1)` sets the camera position in the visualization.
- **solver settings**: Such as `UseSparsityPatternLearner`, `LockSparsityPattern`, etc.

## Simulation Loop

### APIs and Functions:

#### API: `vis.AttachSystem(sys)`
- **Arguments**: 
  - `sys`: The physical system to attach.
- **Usage**: Attaches the physical system to the Irrlicht visualization system.

#### API: `vis.SetWindowSize(width, height)`
- **Arguments**: 
  - `width`: Window width.
  - `height`: Window height.
- **Usage**: Sets the size of the visualization window.

#### API: `vis.SetWindowTitle(title)`
- **Arguments**: 
  - `title`: The title of the window.
- **Usage**: Sets the title of the Irrlicht window.

#### API: `vis.Initialize()`
- **Arguments**: None
- **Usage**: Initializes the Irrlicht visualization system.

#### API: `vis.AddLogo(file)`
- **Arguments**: 
  - `file`: Path to the logo file.
- **Usage**: Adds a logo to the visualization window.

#### API: `vis.AddSkyBox()`
- **Arguments**: None
- **Usage**: Adds a skybox to the visualization.

#### API: `vis.AddCamera(camera_position)`
- **Arguments**: 
  - `camera_position`: A `ChVector3d` object specifying camera position.
- **Usage**: Adds a camera to the visualization system.

#### API: `vis.AddTypicalLights()`
- **Arguments**: None
- **Usage**: Adds typical lighting to the scene.

#### API: `sys.SetSolver(solver)`
- **Arguments**: 
  - `solver`: An instance of the `ChSolver` class.
- **Usage**: Sets the solver for the physical system.

#### API: `solver.SetMaxIterations(iterations)`
- **Arguments**: 
  - `iterations`: Maximum number of solver iterations.
- **Usage**: Sets the maximum iterations for the solver.

#### API: `solver.SetTolerance(tolerance)`
- **Arguments**: 
  - `tolerance`: The tolerance for solver convergence.
- **Usage**: Sets the convergence tolerance for the solver.

#### API: `solver.EnableDiagonalPreconditioner(enable)`
- **Arguments**: 
  - `enable`: Boolean, whether to enable diagonal preconditioning.
- **Usage**: Enables or disables diagonal preconditioning for the solver.

#### API: `solver.EnableWarmStart(enable)`
- **Arguments**: 
  - `enable`: Boolean, whether to enable warm starting.
- **Usage**: Enables or disables warm starting for the solver.

#### API: `solver.SetVerbose(enable)`
- **Arguments**: 
  - `enable`: Boolean, whether to enable verbosity.
- **Usage**: Enables or disables verbose output for the solver.

#### API: `ts = chrono.ChTimestepperEulerImplicitLinearized(sys)`
- **Arguments**: 
  - `sys`: The physical system.
- **Usage**: Sets the time integrator to Euler Implicit Linearized.

#### API: `sys.SetTimestepper(ts)`
- **Arguments**: 
  - `ts`: The timestepper to use.
- **Usage**: Assigns the timestepper to the physical system.

### Simulation Loop Steps:

#### API: `vis.Run()`
- **Arguments**: None
- **Usage**: Runs the main simulation loop for the Irrlicht visualization.

#### API: `vis.BeginScene()`
- **Arguments**: None
- **Usage**: Prepares the scene for rendering in the visualization loop.

#### API: `vis.Render()`
- **Arguments**: None
- **Usage**: Renders the current scene in the visualization loop.

#### API: `vis.EndScene()`
- **Arguments**: None
- **Usage**: Finalizes the scene rendering in the visualization loop.

#### API: `sys.DoStepDynamics(step_size)`
- **Arguments**: 
  - `step_size`: The time step size.
- **Usage**: Advances the dynamics of the physical system by the given time step.

### Custom Model Function:
#### Function in `model`:
- **Usage**: Any custom functionality like `PrintBodyPositions()` could be called for debugging or logging.

This concludes the detailed API documentation for the provided code example.