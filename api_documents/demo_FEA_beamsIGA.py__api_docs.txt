# API Documentation for Jeffcott Rotor Simulation

## Overview
This documentation covers the different libraries, APIs, and functions used in the provided Jeffcott rotor simulation code. The sections include details on library imports, contact and collision settings, visualization settings, body initialization, parameter settings, and the simulation loopâ€”each describing relevant functions and their arguments.

## Library
The following libraries and modules are imported and used in the code:

1. **math as m**
   - Standard Python library for mathematical functions.

2. **pychrono as chrono**
   - Main Chrono library for physics simulation.

3. **pychrono.fea as fea**
   - Finite Element Analysis (FEA) module of the Chrono library.

4. **pychrono.pardisomkl as mkl**
   - Pardiso MKL solver module of the Chrono library.

5. **pychrono.irrlicht as chronoirr**
   - Irrlicht visualization module of the Chrono library.

## Contact and Collision Setting
This section covers setting up contact materials, collision shapes, and collision settings. However, the provided code does not explicitly set contact materials or collision shapes as it focuses primarily on FEA and visualization settings.

## Visualization Setting
Setting up the visualization including materials, shapes, and visualization systems involves the following APIs:

1. **ChVisualShapeFEA**
   - Adds visual shapes to the FEA mesh.
   - **Arguments:**
       - `SetFEMdataType`: Type of FEM data to visualize (e.g., `DataType_SURFACE`).
       - `SetSmoothFaces`: Whether to smooth the faces (boolean).
       - `SetFEMglyphType`: Type of glyphs to visualize (e.g., `GlyphType_NODE_CSYS`).
       - `SetSymbolsThickness`: Thickness of symbols for glyphs.
       - `SetSymbolsScale`: Scale of symbols for glyphs.
       - `SetZbufferHide`: Whether to hide symbols behind other objects using the Z-buffer.

2. **ChVisualSystemIrrlicht**
   - Initializes and configures the Irrlicht visualization system.
   - **Arguments:**
       - `AttachSystem`: Attach the Chrono system to the visualization.
       - `SetWindowSize`: Set the window size.
       - `SetWindowTitle`: Set the window title.
       - `Initialize`: Initialize the visualization.
       - `AddLogo`: Add a logo to the visualization.
       - `AddSkyBox`: Add a skybox to the visualization.
       - `AddCamera`: Add a camera to the visualization.
       - `AddTypicalLights`: Add typical lighting to the visualization scene.

## Initialize Body
Functions and APIs used to initialize bodies in the simulation with their properties:

1. **ChSystemSMC**
   - Creates the Chrono physical system.
   - **Arguments:**
       - None.
   - **Usage:** Initializes a new mixed compliance (SMC) simulation system.

2. **ChMesh**
   - Creates a mesh for the FEA.
   - **Arguments:**
       - `SetAutomaticGravity`: Sets automatic gravity application with integration points.
       - `Add`: Adds the mesh to the system.

3. **ChInertiaCosseratSimple**
   - Defines inertia properties for a Cosserat beam section.
   - **Arguments:**
       - `SetDensity`: Sets the density of the beam.
       - `SetArea`: Sets the cross-sectional area.
       - `SetIyy`, `SetIzz`, `SetIxx`: Sets the moments of inertia.
   
4. **ChElasticityCosseratSimple**
   - Defines elasticity properties for a Cosserat beam section.
   - **Arguments:**
       - `SetYoungModulus`: Sets the Young's modulus.
       - `SetShearModulusFromPoisson`: Sets the shear modulus from Poisson's ratio.
       - `SetIyy`, `SetIzz`: Sets the moments of inertia.

5. **ChBeamSectionCosserat**
   - Combines inertia and elasticity for the beam section.
   - **Arguments:**
       - Inertia and elasticity objects.
       - `SetCircular`: Sets whether the section is circular.
       - `SetDrawCircularRadius`: Sets the radius for drawing.

6. **ChBuilderBeamIGA**
   - Tool for creating a beam with IGA elements.
   - **Arguments:**
       - `BuildBeam`: Builds the beam.
       - `GetLastBeamNodes`: Retrieves the nodes in the beam.
  
7. **ChBodyEasyCylinder**
   - Creates a cylindrical body.
   - **Arguments:**
       - `SetCoordsys`: Sets the initial coordinate system.

8. **ChLinkMateFix**
   - Fixes a node to a body.
   - **Arguments:**
       - `Initialize`: Initializes the link with a node and a body.

9. **ChLinkMateGeneric**
   - Generic kinematic constraint.
   - **Arguments:**
       - `Initialize`: Initializes the link with specified freedoms.

10. **ChLinkMotorRotationSpeed**
   - Adds a motor to rotate the beam.
   - **Arguments:**
       - `Initialize`: Initializes the motor link.
       - `SetMotorFunction`: Sets the motor function (speed vs. time).

11. **ChFunction**
   - Base class for defining custom functions.
   - **Arguments:**
       - `GetVal`: Custom method for getting function values.
       - `SetMotorFunction`: Applies this function to the motor.

## Setting Parameters
Describes the parameters used in the code to define physical properties:

1. **beam_L** 
   - Length of the beam.
   
2. **beam_ro**
   - Outer radius of the beam.
   
3. **beam_ri**
   - Inner radius of the beam.

4. **density**
   - Density of the beam's material.

5. **Young's Modulus**
   - Elasticity property of the material.
   
6. **Shear Modulus**
   - Defines the material's shear property.

## Simulation Loop
APIs and functions for running the simulation, including solver settings and rendering steps:

1. **ChSolverPardisoMKL**
   - Uses the Pardiso MKL solver.
   - **Arguments:**
       - None.
   - **Usage:** Sets a more accurate solver for FEA.

2. **DoStaticLinear**
   - Initializes the static linear solution.
   - **Arguments:**
       - None.
   - **Usage:** Applies a static linear solution to the system.

3. **DoStepDynamics**
   - Advances the simulation by a time step.
   - **Arguments:**
       - Time step value (e.g., 0.002).
   - **Usage:** Advances the simulation by a specified time step.

4. **ChVisualSystemIrrlicht**
   - Visual system methods for rendering each frame.
   - **Arguments:**
       - `Run`: Checks if the visual system is running.
       - `BeginScene`: Prepares to render a new scene.
       - `Render`: Renders the scene.
       - `EndScene`: Finalizes the rendering.

By following the documentation above, all the components, settings, and procedures used in the Jeffcott rotor simulation can be better understood and utilized.