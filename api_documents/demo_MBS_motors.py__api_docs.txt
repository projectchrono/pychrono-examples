# API Documentation for the Provided Code Example

## Library
The following libraries and modules are imported and used in the code:

- `pychrono.core` as `chrono`: The core module of Project Chrono, providing functionalities for physical simulation.
- `pychrono.irrlicht` as `chronoirr`: The module for creating visualizations using the Irrlicht engine.
- `math` as `m`: Standard Python math library for mathematical functions.
- `copy`'s `deepcopy` function: Used to create deep copies of objects.

## Contact and Collision Setting
### Libraries & Modules:
- `pychrono.core`
- `pychrono.irrlicht`
- `math`
- `copy`

### APIs and Functions
#### `CreateSliderGuide(material, system, pos)`
- **Arguments**: 
  - `material` (contact material)
  - `system` (Chrono physical system)
  - `pos` (3D position for the creation of the slider and guide)
  
- **Usage**:
  Creates a slider and a guide body in the system at the specified position, applies contact material, and sets up their collision shapes.

#### `CreateStatorRotor(material, system, pos)`
- **Arguments**: 
  - `material` (contact material)
  - `system` (Chrono physical system)
  - `pos` (3D position for the creation of the stator and rotor)

- **Usage**:
  Creates a stator and rotor, applies contact material, and sets up their collision shapes.

### Contact Material and System Initialization
#### `chrono.ChSystemNSC()`
- **Usage**:
  Initializes a physical system using non-smooth contact.

#### `chrono.ChContactMaterialNSC()`
- **Usage**:
  Creates a contact material for non-smooth contact dynamics.

#### `sys.SetCollisionSystemType(chrono.ChCollisionSystem.Type_BULLET)`
- **Usage**:
  Sets the collision detection system to use the BULLET library.

#### `sys.Add(body)`
- **Arguments**: 
  - `body`: The body to be added to the system.

- **Usage**:
  Adds a body to the physical system.

## Visualization Setting
### Libraries & Modules:
- `pychrono.irrlicht`

### APIs and Functions
#### `vis = chronoirr.ChVisualSystemIrrlicht()`
- **Usage**:
  Initializes the Irrlicht visualization system.

#### `vis.AttachSystem(sys)`
- **Arguments**: 
  - `sys`: The physical system to be visualized.

- **Usage**:
  Attaches the physical system to the visualization system.

#### `vis.SetWindowSize(1024, 768)`
- **Arguments**: 
  - `width`, `height`: The width and height of the window in pixels.

- **Usage**:
  Sets the window size for the visualization.

#### `vis.SetWindowTitle('Motors demo')`
- **Arguments**: 
  - `title` (string): The title of the window.

- **Usage**:
  Sets the window title for the visualization.

#### `vis.Initialize()`
- **Usage**:
  Initializes the visualization system.

#### `vis.AddLogo(chrono.GetChronoDataFile('logo_pychrono_alpha.png'))`
- **Arguments**: 
  - `file_path` (string): The path to the logo file.

- **Usage**:
  Adds a logo to the visualization.

#### `vis.AddSkyBox()`
- **Usage**:
  Adds a skybox to the visualization.

#### `vis.AddCamera(chrono.ChVector3d(1, 3, -7))`
- **Arguments**: 
  - `position` (3D vector): Position of the camera.

- **Usage**:
  Adds a camera at the specified position.

#### `vis.AddTypicalLights()`
- **Usage**:
  Adds typical lights to the visualization.

#### `vis.AddLightWithShadow()`
- **Arguments**: 
  - `position` (3D vector): Position of the light.
  - `target_position` (3D vector): Target position of the light.
  - `radius`, `inner_angle`... : Various parameters for the light's properties.

- **Usage**:
  Adds a light with shadow effects.

## Initialize Body
### Libraries & Modules:
- `pychrono.core`

### APIs and Functions
#### `chrono.ChBodyEasyBox(width, height, depth, density, collide, visualization, material)`
- **Arguments**: 
  - `width`, `height`, `depth`: Dimensions of the box.
  - `density`: Density of the box.
  - `collide`: Boolean flag to enable collision.
  - `visualization`: Boolean flag to enable visualization.
  - `material`: Contact material to be assigned to the body.

- **Usage**:
  Creates a box with easy setup for physical and visualization properties.

#### `chrono.ChBodyEasyCylinder(axis, radius, height, density, collide, visualization, material)`
- **Arguments**: 
  - `axis`: Axis direction for the cylinder.
  - `radius`, `height`: Dimensions of the cylinder.
  - `density`: Density of the cylinder.
  - `collide`: Boolean flag to enable collision.
  - `visualization`: Boolean flag to enable visualization.
  - `material`: Contact material to be assigned to the body.

- **Usage**:
  Creates a cylinder with easy setup for physical and visualization properties.

#### `body.SetPos(position)`
- **Arguments**: 
  - `position` (3D vector): Position to set the body.

- **Usage**:
  Sets the position of the body.

#### `body.SetFixed(boolean)`
- **Arguments**: 
  - `boolean`: Whether the body should be fixed in space.

- **Usage**:
  Fixes or unfixes the body in space.

#### `body.GetVisualShape(index).SetColor(color)`
- **Arguments**: 
  - `index`: Index of the visual shape.
  - `color` (ChColor): Color to set on the visual shape.

- **Usage**:
  Sets the color of the visual shape.

#### `body.GetVisualShape(index).SetTexture(file_path)`
- **Arguments**: 
  - `index`: Index of the visual shape.
  - `file_path` (string): Path to the texture file.

- **Usage**:
  Sets the texture of the visual shape.

## Setting Parameters
### Parameters in the Code
#### `position`
- **Usage**:
  Sets the position for various bodies and motors.
  
#### `density`
- **Usage**:
  Defines the material density of the body.

#### `radius`, `height`
- **Usage**:
  Defines the dimensions of various shapes like cylinder and box.

#### `material`
- **Usage**:
  Defines the contact material applied to bodies.

#### `initial speeds`
- **Usage**:
  Sets the initial speed for various movable parts.

## Simulation Loop
### Libraries & Modules:
- `pychrono.core`

### APIs and Functions
#### `chrono.ChSolverPSOR()`
- **Usage**:
  Initializes a Projected Successive Over-Relaxation solver for the physical system.

#### `solver.SetMaxIterations(count)`
- **Arguments**: 
  - `count` (integer): Maximum number of iterations for the solver.

- **Usage**:
  Sets the maximum number of iterations for the solver.

#### `sys.SetSolver(solver)`
- **Arguments**: 
  - `solver` (ChSolver): Solver to set for the system.

- **Usage**:
  Sets the solver for the system.

#### `chrono.ChRealtimeStepTimer()`
- **Usage**:
  Initializes a real-time step timer.

#### `sys.GetChTime()`
- **Usage**:
  Gets the current simulation time.

#### `sys.DoStepDynamics(time_step)`
- **Arguments**: 
  - `time_step` (float): Time step for the simulation.

- **Usage**:
  Advances the simulation by a given time step.

#### `timer.Spin(time_step)`
- **Arguments**: 
  - `time_step` (float): Time step for the real-time timer.

- **Usage**:
  Delays the execution to match real-time.

#### `vis.BeginScene()`
- **Usage**:
  Starts rendering a new scene.

#### `vis.Render()`
- **Usage**:
  Renders the current scene.

#### `vis.EndScene()`
- **Usage**:
  Ends rendering of the scene.

## Function and Class Definitions in the Example
### `chrono.ChLinkMotorRotationSpeed`
- **Arguments**: None.
- **Usage**: Creates a rotational motor that imposes a speed.

### `rotation_speed.SetSpeedFunction(Function)`
- **Arguments**: 
  - `Function` (ChFunction): Speed function to use for the motor.

- **Usage**: Sets the speed function for the rotational motor.

### `chrono.ChLinkMotorRotationAngle`
- **Arguments**: None.
- **Usage**: Creates a rotational motor that imposes an angle.

### `rotation_angle.SetAngleFunction(Function)`
- **Arguments**: 
  - `Function` (ChFunction): Angle function to use for the motor.

- **Usage**: Sets the angle function for the rotational motor.

### `chrono.ChLinkMotorRotationTorque`
- **Arguments**: None.
- **Usage**: Creates a rotational motor that imposes a torque function.

### `rotation_torque.SetTorqueFunction(Function)`
- **Arguments**: 
  - `Function` (ChFunction): Torque function to use for the motor.

- **Usage**: Sets the torque function for the rotational motor.

### `chrono.ChLinkMotor_linear_position`
- **Arguments**: None.
- **Usage**: Creates a linear motor that imposes a position function.

### `linear_position.SetPositionFunction(Function)`
- **Arguments**: 
  - `Function` (ChFunction): Position function to use for the motor.

- **Usage**: Sets the position function for the linear motor.

### `chrono.ChLinkMotorLinearSpeed`
- **Arguments**: None.
- **Usage**: Creates a linear motor that imposes a speed function.

### `linear_speed.SetSpeedFunction(Function)`
- **Arguments**: 
  - `Function` (ChFunction): Speed function to use for the motor.

- **Usage**: Sets the speed function for the linear motor.

### `chrono.ChLinkMotorLinearForce`
- **Arguments**: None.
- **Usage**: Creates a linear motor that imposes a force function.

### `linear_force.SetForceFunction(Function)`
- **Arguments**: 
  - `Function` (ChFunction): Force function to use for the motor.

- **Usage**: Sets the force function for the linear motor.

### Custom Classes
#### `MyTorqueCurve`
- **Inherits from**: `chrono.ChFunction`
- **Arguments**: 
  - Custom parameters like `e2`, `r2`, etc for the torque-speed curve.
- **Usage**: Custom torque-speed curve for the rotational motor.

#### `MyForceClass`
- **Inherits from**: `chrono.ChFunctionSetpointCallback`
- **Arguments**: 
  - Custom parameters for the PID force controller.
- **Usage**: Custom PID controller for computing force in real-time in the simulation loop.

## Examples in the Simulation
### Rotational Motors (Examples A.1 to A.5)
Showcase various ways to impose rotational movement using speed, angle, torque, and custom driveline.

### Linear Motors (Examples B.1 to B.6)
Showcase various ways to impose linear movement using position, speed, force, and custom driveline.

The code includes multiple instances and setups, demonstrating various use cases for both rotational and linear motors under different control schemes.
