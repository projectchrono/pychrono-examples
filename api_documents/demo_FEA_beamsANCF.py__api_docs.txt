# API Documentation for Beam Simulation with Project Chrono 

This document provides detailed information about the functions and APIs utilized in the beam simulation code using Project Chrono.

## Library

### Imported Libraries and Modules

- `pychrono as chrono`: Main Chrono engine library providing core physics and simulation functionalities.
- `pychrono.fea as fea`: Extension for Finite Element Analysis (FEA) in Chrono.
- `pychrono.pardisomkl as mkl`: Provides solver capabilities using Intel MKL Pardiso.
- `pychrono.irrlicht as chronoirr`: Used for visualization using the Irrlicht engine.
- `copy`: Python standard library for creating deep copies of objects.
- `math`: Python standard library providing mathematical functions.

## Contact and Collision Setting

### N/A

This code example doesn't explicitly involve contact materials or collision shapes settings. It's focused on beam simulations without dynamics involving collisions.

## Visualization Setting

### Setting Up Visualization

#### `chrono.ChVisualShapeFEA`

- **Name**: `SetFEMdataType`
  - **Arguments**: 
    - `data_type` (int): Type of data to visualize (e.g. surfaces, nodes).
  - **Usage**: Sets the type of Finite Element Method (FEM) data visualization (surface, wireframe, etc.)

- **Name**: `SetWireframe`
  - **Arguments**: 
    - `enable` (bool): Whether to display as a wireframe.
  - **Usage**: Configures the visual shape to render as a wireframe.

- **Name**: `SetDrawInUndeformedReference`
  - **Arguments**: 
    - `enable` (bool): Whether to draw the beam in the undeformed reference configuration.
  - **Usage**: Enables/disables drawing in undeformed reference configuration.

- **Name**: `SetFEMglyphType`
  - **Arguments**: 
    - `glyph_type` (int): Type of glyph to visualize FEM data (e.g., node dots).
  - **Usage**: Sets the glyph type for visualizing FEM data.

- **Name**: `SetSymbolsThickness`
  - **Arguments**: 
    - `thickness` (float): Thickness of the symbols.
  - **Usage**: Sets the thickness of visualized symbols in the mesh.

#### `chronoirr.ChVisualSystemIrrlicht`

- **Name**: `AttachSystem`
  - **Arguments**:
    - `sys` (chrono.ChSystem): The physical system to visualize.
  - **Usage**: Attaches a Chrono physical system to the Irrlicht visualization system.

- **Name**: `SetWindowSize`
  - **Arguments**: 
    - `width` (int): Width of the window.
    - `height` (int): Height of the window.
  - **Usage**: Sets the window size for the visualization.

- **Name**: `SetWindowTitle`
  - **Arguments**: 
    - `title` (str): Title of the window.
  - **Usage**: Sets the window title for the visualization.

- **Name**: `Initialize`
  - **Arguments**: None
  - **Usage**: Initializes the visualization system.

- **Name**: `AddLogo`
  - **Arguments**: 
    - `logo_file` (str): Path to the logo file.
  - **Usage**: Adds a logo to the visualization window.

- **Name**: `AddSkyBox`
  - **Arguments**: None
  - **Usage**: Adds a skybox to the scene.

- **Name**: `AddCamera`
  - **Arguments**: 
    - `position` (chrono.ChVector): Camera position.
    - `target` (chrono.ChVector): Camera target.
  - **Usage**: Adds a camera to the scene.

- **Name**: `AddTypicalLights`
  - **Arguments**: None
  - **Usage**: Adds typical lighting to the scene.

## Initialize Body

### Initializing the Beam Elements

#### `PopulateMesh_beamANCF_3333`

- **Arguments**: 
  - `mesh` (fea.ChMesh): The mesh container.
  - `material` (fea.ChMaterialBeamANCF): The material for beam elements.
  - `dimensions` (chrono.ChVector3d): Beam dimensions (length, width, thickness).
- **Usage**: Populates the mesh container with beam elements of type `ANCF_3333`.

#### `PopulateMesh_beamANCF_3243`

- **Arguments**: 
  - `mesh` (fea.ChMesh): The mesh container.
  - `material` (fea.ChMaterialBeamANCF): The material for beam elements.
  - `dimensions` (chrono.ChVector3d): Beam dimensions (length, width, thickness).
- **Usage**: Populates the mesh container with beam elements of type `ANCF_3243`.

## Setting Parameters

### Beam Material Properties

- **`length`**: Beam length in meters.
- **`width`**: Beam width in meters.
- **`thickness`**: Beam thickness in meters.
- **`rho`**: Density of the beam material in kg/m³.
- **`E`**: Young's modulus of the beam material in Pascals.
- **`nu`**: Poisson's ratio.

### Beam Material Creation

#### `fea.ChMaterialBeamANCF`

- **Arguments**: 
  - `rho` (float): Density.
  - `E` (float): Elastic modulus.
  - `nu` (float): Poisson’s ratio.
  - `k1` (float): Shear correction coefficient.
  - `k2` (float): Shear correction coefficient.
- **Usage**: Creates a new material instance for ANCF beam elements.

### System Creation

#### `chrono.ChSystemSMC`

- **Arguments**: None
- **Usage**: Creates a new physical system using the Smooth Contact (SMC) method.

#### `chrono.ChSolverPardisoMKL`

- **Arguments**: None
- **Usage**: Creates a new solver using the Pardiso MKL library.

### System Solver and Integrator Settings

#### `SetGravitationalAcceleration`

- **Arguments**: 
  - `acceleration` (chrono.ChVector3d): Gravitational acceleration vector.
- **Usage**: Sets the gravitational acceleration for the system.

#### `sys.SetSolver`

- **Arguments**: 
  - `solver` (chrono.ChSolver): Solver instance to use.
- **Usage**: Sets the solver for the physical system.

#### `chrono.ChTimestepperHHT`

- **Arguments**: 
  - `sys` (chrono.ChSystem): The physical system to integrate.
- **Usage**: Creates a time stepper using the HHT method.

#### Time Stepper Settings

- **Name**: `SetAlpha`
  - **Arguments**: 
    - `alpha` (float): Parameter for HHT method.
  - **Usage**: Sets the alpha parameter for the HHT integrator.

- **Name**: `SetMaxIters`
  - **Arguments**: 
    - `max_iters` (int): Maximum iterations.
  - **Usage**: Sets the maximum number of iterations for the integrator.

- **Name**: `SetAbsTolerances`
  - **Arguments**: 
    - `abs_tol` (float): Absolute tolerance.
  - **Usage**: Sets the absolute tolerance for convergence.

- **Name**: `SetVerbose`
  - **Arguments**: 
    - `verbose` (bool): Enable/disable verbose output.
  - **Usage**: Enables or disables verbose output during solving.

- **Name**: `SetModifiedNewton`
  - **Arguments**: 
    - `use_modified` (bool): Use modified Newton method.
  - **Usage**: Enables or disables the modified Newton method.

## Simulation Loop

### Main Simulation Loop

#### `vis.Run`

- **Arguments**: None
- **Usage**: Checks if the visualization system is still running.

#### Scene Rendering

- **Name**: `BeginScene`
  - **Arguments**: None
  - **Usage**: Begins rendering a new scene.

- **Name**: `Render`
  - **Arguments**: None
  - **Usage**: Renders the current scene.

- **Name**: `EndScene`
  - **Arguments**: None
  - **Usage**: Ends the current scene rendering.

#### `sys.DoStepDynamics`

- **Arguments**: 
  - `step_size` (float): Time step size.
- **Usage**: Advances the simulation by one time step.

This documentation provides comprehensive information on the key components, functions, and APIs used in the simulation code, ensuring users understand the structure and purpose of each element.