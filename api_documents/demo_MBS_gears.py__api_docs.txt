# API Documentation for the Gear Constraint Simulation Code

## Library
This code relies heavily on the PyChrono library and various modules within it. The specific libraries and modules used are:

1. **pychrono**
   - Main library for physical simulation.
   - Functions: `ChSystemNSC`, `ChContactMaterialNSC`, `ChBodyEasyBox`, `ChBodyEasyCylinder`, `ChVisualMaterial`, `ChLinkLockRevolute`, `ChLinkMotorRotationSpeed`, `ChFunctionConst`, `ChLinkLockGear`, `ChLinkLockPulley`, `ChTimestepper`.

2. **pychrono.irrlicht**
   - Module for rendering and visualization.
   - Functions: `ChVisualSystemIrrlicht`, `drawSegment`.

3. **math**
   - Module for basic mathematical functions.
   - Functions: `pi`.

## Contact and Collision Setting
This section deals with setting up materials, collision shapes, and other collision-related settings.

### chrono.ChContactMaterialNSC
- **Arguments**: None
- **Usage**: Creates a shared contact material used by all rigid bodies in the system.

### chrono.ChBodyEasyBox
- **Arguments**: `width, height, depth, mass, collide, visualize, material`
- **Usage**: Creates a box-shaped body. Here, it is used to create the truss and the rotating bar support for the wheels.

### chrono.ChBodyEasyCylinder
- **Arguments**: `axis, radius, height, mass, collide, visualize, material`
- **Usage**: Creates a cylinder-shaped body. Here, it is used to create different gear wheels.

### chrono.ChLinkLockRevolute
- **Arguments**: None
- **Usage**: Creates a revolute joint, which allows the bodies to rotate relative to each other around a single axis.

## Visualization Setting
This section deals with the visualization materials, shapes, and systems.

### chrono.ChVisualMaterial
- **Arguments**: None
- **Usage**: Creates a visual material for rendering the objects.

### ChVisualShapeCylinder
- **Arguments**: `radius, height`
- **Usage**: Creates a cylinder shape for aesthetic visualization.

### chronoirr.ChVisualSystemIrrlicht
- **Arguments**: None
- **Usage**: Sets up the Irrlicht visualization system.

### chrono.ChFunctionConst
- **Arguments**: `value`
- **Usage**: Sets a constant speed function for a rotation motor.

## Initialize Body
This section involves the initialization of physical bodies in the simulation.

### chrono.ChSystemNSC
- **Arguments**: None
- **Usage**: Initializes a new physical simulation system using the Non-Smooth Contacts (NSC) method.

### chrono.ChBodyEasyBox
- **Arguments**: `width, height, depth, mass, collide, visualize, material`
- **Usage**: Adds a box-shaped rigid body to the system.

### chrono.ChBodyEasyCylinder
- **Arguments**: `axis, radius, height, mass, collide, visualize, material`
- **Usage**: Adds a cylinder-shaped rigid body to the system.

### ChLinkLockRevolute.Initialize
- **Arguments**: `body1, body2, frame`
- **Usage**: Initializes a revolute joint between two bodies.

### chrono.ChVector3d
- **Arguments**: `x, y, z`
- **Usage**: Represents a 3D vector; used for positioning bodies.

### chrono.QuatFromAngleX
- **Arguments**: `angle`
- **Usage**: Creates a quaternion from a rotation angle around the X-axis.

## Setting Parameters
This section lists and describes the parameters used in the code.

- **radA**: Radius of Gear A; set to 2.
- **radB**: Radius of Gear B; set to 4.
- **radC**: Calculated as 2*radB + radA, used for the large internal gear.
- **radD**: Radius of Gear D; set to 5.
- **radE**: Radius of Pulley E; set to 2.
- **density**: Set indirectly by the mass of the bodies and their volume.
- **initial speeds**: Set by `chrono.ChFunctionConst` for the motor.

## Simulation Loop
This section describes the main simulation loop, which includes solver settings and rendering steps.

### ChVisualSystemIrrlicht.AttachSystem
- **Arguments**: `system`
- **Usage**: Attaches the physical simulation system to the visualization system.

### ChVisualSystemIrrlicht.SetWindowSize
- **Arguments**: `width, height`
- **Usage**: Sets the window size for the visualization.

### ChVisualSystemIrrlicht.SetWindowTitle
- **Arguments**: `title`
- **Usage**: Sets the title of the visualization window.

### ChVisualSystemIrrlicht.Initialize
- **Arguments**: None
- **Usage**: Initializes the Irrlicht visualization system.

### ChVisualSystemIrrlicht.AddLogo
- **Arguments**: `file_path`
- **Usage**: Adds a logo to the visualization window.

### ChVisualSystemIrrlicht.AddSkyBox
- **Arguments**: None
- **Usage**: Adds a skybox for the background.

### ChVisualSystemIrrlicht.AddCamera
- **Arguments**: `position`
- **Usage**: Adds a camera to the scene for viewing.

### ChVisualSystemIrrlicht.AddTypicalLights
- **Arguments**: None
- **Usage**: Adds typical lighting to the scene.

### ChSystemNSC.SetTimestepperType
- **Arguments**: `type`
- **Usage**: Sets the type of timestepper for the simulation. Here, it is set to Euler Implicit Projected.

### ChVisualSystemIrrlicht.Run
- **Arguments**: None
- **Usage**: Runs the visualization system to update the scene.

### ChVisualSystemIrrlicht.BeginScene
- **Arguments**: None
- **Usage**: Begins a new rendering scene.

### ChVisualSystemIrrlicht.Render
- **Arguments**: None
- **Usage**: Renders the scene.

### ChVisualSystemIrrlicht.EndScene
- **Arguments**: None
- **Usage**: Ends the current rendering scene.

### ChSystemNSC.DoStepDynamics
- **Arguments**: `time_step`
- **Usage**: Advances the simulation by a single time step.

### chronoirr.drawSegment
- **Arguments**: `visual_system, start_point, end_point`
- **Usage**: Draws a visual segment between two points, used here to represent the pulleys.

This documentation provides a comprehensive overview of the functions and APIs used in the given code, categorized into different sections to ease understanding and usage.