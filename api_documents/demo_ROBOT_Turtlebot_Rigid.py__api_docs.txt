# Turtlebot Robot on Rigid Terrain Simulation - API Documentation

## Library

### Imported Libraries and Modules

1. `os`
   - Standard Python library for interacting with the operating system.

2. `math`
   - Standard Python library for mathematical operations.

3. `numpy` (imported as `np`)
   - Library for numeric operations, primarily used for array manipulation.

4. `pychrono` (imported as `chrono`)
   - Main Chrono Engine library used for physics-based simulation.

5. `pychrono.robot` (imported as `turtlebot`)
   - Chrono Engine module specifically for the Turtlebot robot.

6. `pychrono.irrlicht` (imported as `chronoirr`)
   - Chrono Engine module for Irrlicht, used for rendering and visualization.

## Contact and Collision Setting

### Chrono System Setup

#### `chrono.ChSystemNSC()`
- **Arguments**: None
- **Usage**: Creates a new non-smooth contact (NSC) Chrono simulation system.

#### `system.SetCollisionSystemType(chrono.ChCollisionSystem.Type_BULLET)`
- **Arguments**: `chrono.ChCollisionSystem.Type_BULLET` (collision system type)
- **Usage**: Sets the type of collision system to use (Bullet in this case).

#### `system.SetGravitationalAcceleration(chrono.ChVector3d(0, 0, -9.81))`
- **Arguments**: `chrono.ChVector3d(0, 0, -9.81)` (vector specifying gravitational acceleration)
- **Usage**: Sets the gravitational acceleration of the system.

#### `chrono.ChCollisionModel.SetDefaultSuggestedEnvelope(0.0025)`
- **Arguments**: `0.0025` (envelope value)
- **Usage**: Sets the default suggested collision envelope for all collision shapes.

#### `chrono.ChCollisionModel.SetDefaultSuggestedMargin(0.0025)`
- **Arguments**: `0.0025` (margin value)
- **Usage**: Sets the default suggested margin for all collision shapes.

### Ground Body Setup

#### `chrono.ChContactMaterialNSC()`
- **Arguments**: None
- **Usage**: Creates a contact material for non-smooth contact (NSC) model.

#### `chrono.ChBodyEasyBox(20, 20, 1, 1000, True, True, ground_mat)`
- **Arguments**:
  - `20`, `20`, `1` (dimensions of the box)
  - `1000` (density)
  - `True` (whether the collision model should be created)
  - `True` (whether visualization assets should be created)
  - `ground_mat` (contact material)
- **Usage**: Creates a box-shaped rigid body that can interact with other bodies.

#### `ground.SetPos(chrono.ChVector3d(0, 0, -1))`
- **Arguments**: `chrono.ChVector3d(0, 0, -1)` (position vector)
- **Usage**: Sets the position of the ground object.

#### `ground.SetFixed(True)`
- **Arguments**: `True` (fixed status)
- **Usage**: Fixes the ground in place so it does not move during the simulation.

#### `ground.GetVisualShape(0).SetTexture(chrono.GetChronoDataFile("textures/concrete.jpg"))`
- **Arguments**: `chrono.GetChronoDataFile("textures/concrete.jpg")` (path to texture file)
- **Usage**: Applies a concrete texture to the visual representation of the ground.

#### `system.Add(ground)`
- **Arguments**: `ground` (ChBody object)
- **Usage**: Adds the ground body to the simulation system.

## Visualization Setting

### Visualization System Setup

#### `chronoirr.ChVisualSystemIrrlicht()`
- **Arguments**: None
- **Usage**: Creates a new Irrlicht-based visualization system.

#### `vis.AttachSystem(system)`
- **Arguments**: `system` (ChSystem object)
- **Usage**: Attaches the visualization system to the Chrono simulation system.

#### `vis.SetCameraVertical(chrono.CameraVerticalDir_Z)`
- **Arguments**: `chrono.CameraVerticalDir_Z` (camera vertical direction)
- **Usage**: Sets the vertical direction for the camera.

#### `vis.SetWindowSize(1280, 720)`
- **Arguments**: `1280` (width), `720` (height)
- **Usage**: Sets the window size for the visualization system.

#### `vis.SetWindowTitle('Turtlebot Robot - Rigid terrain')`
- **Arguments**: `'Turtlebot Robot - Rigid terrain'` (title)
- **Usage**: Sets the window title for the visualization system.

#### `vis.Initialize()`
- **Arguments**: None
- **Usage**: Initializes the visualization system.

#### `vis.AddLogo(chrono.GetChronoDataFile('logo_pychrono_alpha.png'))`
- **Arguments**: `chrono.GetChronoDataFile('logo_pychrono_alpha.png')` (path to logo file)
- **Usage**: Adds a logo to the visualization window.

#### `vis.AddSkyBox()`
- **Arguments**: None
- **Usage**: Adds a skybox to the visualization.

#### `vis.AddCamera(chrono.ChVector3d(0, 1.5, 0.2), chrono.ChVector3d(0, 0, 0.2))`
- **Arguments**:
  - `chrono.ChVector3d(0, 1.5, 0.2)` (camera position)
  - `chrono.ChVector3d(0, 0, 0.2)` (camera target)
- **Usage**: Adds a camera to the visualization system.

#### `vis.AddTypicalLights()`
- **Arguments**: None
- **Usage**: Adds typical lights to the scene.

#### `vis.AddLightWithShadow(chrono.ChVector3d(1.5, -2.5, 5.5), chrono.ChVector3d(0, 0, 0.5), 3, 4, 10, 40, 512)`
- **Arguments**:
  - `chrono.ChVector3d(1.5, -2.5, 5.5)` (light position)
  - `chrono.ChVector3d(0, 0, 0.5)` (light target)
  - `3` (intensity scale)
  - `4` (shadow map count)
  - `10` (shadow map size)
  - `40` (shadow bias)
  - `512` (shadow resolution)
- **Usage**: Adds a light with shadow to the scene.

## Initialize Body

### TurtleBot Initialization

#### `turtlebot.TurtleBot(system, chrono.ChVector3d(0, 0, -0.45), chrono.ChQuaterniond(1, 0, 0, 0))`
- **Arguments**:
  - `system` (ChSystem object)
  - `chrono.ChVector3d(0, 0, -0.45)` (initial position)
  - `chrono.ChQuaterniond(1, 0, 0, 0)` (initial orientation)
- **Usage**: Creates a new TurtleBot robot and places it in the simulation system.

#### `robot.Initialize()`
- **Arguments**: None
- **Usage**: Initializes the TurtleBot, applying necessary configurations for simulation.

## Setting Parameters

### Simulation Settings

#### `time_step = 2e-3`
- **Usage**: Sets the time step increment for the simulation loop.

## Simulation Loop

### Runtime Execution

#### `vis.Run()`
- **Arguments**: None
- **Usage**: Checks if the simulation should continue running.

#### TurtleBot Control

1. **At time = 1 s:**
   - #### `robot.SetMotorSpeed(-0, 0)`
     - **Arguments**: `-0` (speed for the left wheel), `0` (wheel id `0`)
     - **Usage**: Sets the speed for the left drive wheel of the TurtleBot to 0.

   - #### `robot.SetMotorSpeed(-math.pi, 1)`
     - **Arguments**: `-math.pi` (speed for the right wheel), `1` (wheel id `1`)
     - **Usage**: Sets the speed for the right drive wheel of the TurtleBot to start a left turn.

2. **At time = 2 s:**
   - #### `robot.SetMotorSpeed(-math.pi, 0)`
     - **Arguments**: `-math.pi` (speed for the left wheel), `0` (wheel id `0`)
     - **Usage**: Sets the speed for the left drive wheel of the TurtleBot to start a right turn.

   - #### `robot.SetMotorSpeed(-0, 1)`
     - **Arguments**: `-0` (speed for the right wheel), `1` (wheel id `1`)
     - **Usage**: Sets the speed for the right drive wheel of the TurtleBot to 0.

#### Simulation Execution Steps

1. **Begin Scene**
   - #### `vis.BeginScene()`
     - **Arguments**: None
     - **Usage**: Begins the rendering of a new scene.

2. **Render Scene**
   - #### `vis.Render()`
     - **Arguments**: None
     - **Usage**: Renders the current scene.

3. **End Scene**
   - #### `vis.EndScene()`
     - **Arguments**: None
     - **Usage**: Finalizes and displays the rendered scene.

4. **Physics Time Step**
   - #### `system.DoStepDynamics(time_step)`
     - **Arguments**: `time_step` (time step value)
     - **Usage**: Advances the simulation by a single time step.

### Time Increment

#### `time = time + time_step`
- **Usage**: Increments the simulated time by the time step value.