# Particle Emitter and Custom Force Field Simulation Documentation

This documentation provides a detailed explanation of an example code that demonstrates creating a cluster of particles using the `ChParticleEmitter`, applying custom force fields to particles, and using Irrlicht for visualization. The following sections outline the various components and functionalities used in the code.

## Library

- **pychrono**: The main library used for physical simulation.
- **pychrono.irrlicht**: Used for rendering and visualization through the Irrlicht engine.
- **itertools**: Specifically, the `combinations` function from this module is used.

## Contact and Collision Setting

### `chrono.ChContactMaterialNSC`
- **Arguments**: None.
- **Usage**: Creates a contact material object to define friction and other material properties.
- **Example**:
  ```python
  sphere_mat = chrono.ChContactMaterialNSC()
  sphere_mat.SetFriction(0.2)
  ```

### `chrono.ChCollisionSystem.Type_BULLET`
- **Arguments**: None.
- **Usage**: Sets the type of collision system to use (Bullet in this case).
- **Example**:
  ```python
  sys.SetCollisionSystemType(chrono.ChCollisionSystem.Type_BULLET)
  ```

### `ChRandomShapeCreator_AddBodyCallback`
- **Arguments**: Inherits and extends.
- **Usage**: Callback to configure particles when they are created.
- **Example**:
  ```python
  class MyCreatorForAll(chrono.ChRandomShapeCreator_AddBodyCallback):
      def __init__(self, vis, coll):
          ...
      def OnAddBody(self, body, coords, creator):
          ...
  ```

## Visualization Setting

### `chronoirr.ChVisualSystemIrrlicht`
- **Arguments**: None.
- **Usage**: Creates the Irrlicht visualization system.
- **Example**:
  ```python
  vis = chronoirr.ChVisualSystemIrrlicht()
  ```

### `ChVisualSystemIrrlicht.AttachSystem`
- **Arguments**: `sys`
- **Usage**: Attaches the physical system to the visualization system.
- **Example**:
  ```python
  vis.AttachSystem(sys)
  ```

### `ChVisualSystemIrrlicht.SetWindowSize` and `SetWindowTitle`
- **Arguments**: `width`, `height`
- **Usage**: Sets the size and title of the window.
- **Example**:
  ```python
  vis.SetWindowSize(1024,768)
  vis.SetWindowTitle('Particle emitter demo')
  ```

### `ChVisualSystemIrrlicht.Initialize`
- **Arguments**: None.
- **Usage**: Initializes the visualization system.
- **Example**:
  ```python
  vis.Initialize()
  ```

### Visualization Configuration
- **Usage**: Adding logo, skybox, camera, and lights.
- **Example**:
  ```python
  vis.AddLogo(chrono.GetChronoDataFile('logo_pychrono_alpha.png'))
  vis.AddSkyBox()
  vis.AddCamera(chrono.ChVector3d(0, 14, -20))
  vis.AddTypicalLights()
  ```

## Initialize Body

### `chrono.ChBodyEasySphere`
- **Arguments**:
    - `radius`: Radius of the sphere.
    - `density`: Density of the sphere.
    - `visualization`: Whether to add visualization.
    - `collision`: Whether to add collision detection.
    - `material`: Contact material.
- **Usage**: Creates a rigid body in the shape of a sphere.
- **Example**:
  ```python
  msphereBody = chrono.ChBodyEasySphere(2.1, 1800, True, True, sphere_mat)
  ```

### `ChSystemNSC.Add`
- **Arguments**: `body`
- **Usage**: Adds a body to the physical system.
- **Example**:
  ```python
  sys.Add(msphereBody)
  ```

## Setting Parameters

### Setting Properties
- **Density**: Set during body initialization.
- **Initial Position**: Uses `SetPos` to set the initial position.
- **Example**:
  ```python
  msphereBody.SetPos(chrono.ChVector3d(1, 1, 0))
  ```

### `ChContactMaterialNSC.SetFriction`
- **Arguments**: `friction_value`
- **Usage**: Sets the friction coefficient for the material.
- **Example**:
  ```python
  sphere_mat.SetFriction(0.2)
  ```

## Simulation Loop

### Visualization Loop with `vis.Run`
- **Arguments**: None.
- **Usage**: Runs the visualization until the window is closed.
- **Example**:
  ```python
  while vis.Run():
  ```

### `BeginScene`, `Render`, and `EndScene`
- **Arguments**: None.
- **Usage**: Begins, renders, and ends the scene for each frame.
- **Example**:
  ```python
  vis.BeginScene()
  vis.Render()
  vis.EndScene()
  ```

### `ChParticleEmitter.EmitParticles`
- **Arguments**: `sys`, `stepsize`
- **Usage**: Emits particles each step of the simulation.
- **Example**:
  ```python
  emitter.EmitParticles(sys, stepsize)
  ```

### Applying Custom Force Field
- **Usage**: Iterates over bodies to apply a gravitational force.
- **Example**:
  ```python
  for body in sys.GetBodies():
      body.EmptyAccumulators()
  for bodycomb in mlist:
      abodyA = bodycomb[0]
      abodyB = bodycomb[1]
      D_attract = abodyB.GetPos() - abodyA.GetPos()
      r_attract = D_attract.Length()
      f_attract = G_constant * (abodyA.GetMass() * abodyB.GetMass()) / (pow(r_attract, 2))
      F_attract = (D_attract / r_attract) * f_attract
      abodyA.AccumulateForce(F_attract, abodyA.GetPos(), False)
      abodyB.AccumulateForce(-F_attract, abodyB.GetPos(), False)
  ```

### `sys.DoStepDynamics`
- **Arguments**: `stepsize`
- **Usage**: Advances the dynamics of the system by the given time step.
- **Example**:
  ```python
  sys.DoStepDynamics(stepsize)
  ```

This concludes the detailed documentation for the provided code example.