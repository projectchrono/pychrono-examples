# API Documentation for Chrono Simulation Script

This documentation details the usage of various APIs and functions from the Chrono library as used in the provided code example. The code demonstrates contact callbacks for non-smooth contacts (complementarity-based), initializing bodies, and setting parameters for a simulation system.

## Library
This section lists the imported libraries and modules used in the code.

### Libraries Used:
- **pychrono**: The core library that provides the simulation infrastructure.
- **pychrono.irrlicht**: This module provides visualization capabilities using Irrlicht.

```python
import pychrono as chrono
import pychrono.irrlicht as chronoirr
```

## Contact and Collision Setting
This section lists and describes the APIs and functions related to setting up contact materials, collision shapes, and collision settings.

### **ContactReporter Class**
Defines a callback for reporting contacts.

- **Name**: `ContactReporter.__init__`
  - **Arguments**:
    - `self`: Reference to the instance of the class.
    - `box`: The body to report contacts for.
  - **Usage**: Initializes the contact reporter with a specific body.
  
- **Name**: `ContactReporter.OnReportContact`
  - **Arguments**:
    - `self`: Reference to the instance of the class.
    - `pA`, `pB`: Contact points on body A and B, respectively.
    - `plane_coord`: Plane coordinates of contact.
    - `distance`: Distance between bodies at contact.
    - `eff_radius`: Effective radius.
    - `cforce`, `ctorque`: Contact force and torque.
    - `modA`, `modB`: Models (bodies) involved in contact.
  - **Usage**: Prints the contact points of the body initialized during the creation of the ContactReporter instance.
  
### **ContactMaterial Class**
Defines a callback to modify composite material properties upon contact.

- **Name**: `ContactMaterial.__init__`
  - **Arguments**:
    - `self`: Reference to the instance of the class.
  - **Usage**: Initializes the contact material callback.

- **Name**: `ContactMaterial.OnAddContact`
  - **Arguments**:
    - `self`: Reference to the instance of the class.
    - `contactinfo`: Information about the contact.
    - `material`: Material properties of the contact.
  - **Usage**: Modifies the friction of the material based on the z-coordinate of point A in the contact.

### **Collision System and Material Settings**
Creates and configures the collision system and contact material.

- **Name**: `chrono.ChSystemNSC`
  - **Arguments**: None.
  - **Usage**: Initializes a non-smooth contact (NSC) system.

- **Name**: `sys.SetCollisionSystemType`
  - **Arguments**:
    - `chrono.ChCollisionSystem.Type_BULLET`: Specifies the type of collision system to use (Bullet in this case).
  - **Usage**: Sets the collision system type for the simulation.

- **Name**: `chrono.ChContactMaterialNSC`
  - **Arguments**: None.
  - **Usage**: Initializes an NSC contact material.

- **Name**: `material.SetFriction`
  - **Arguments**:
    - `friction`: Sets the friction coefficient.
  - **Usage**: Sets the friction value for the contact material.

## Visualization Setting
This section lists and describes the APIs and functions related to setting up the visualization, including materials, shapes, and visualization systems.

### **Initializing the Visualization System**
Sets up the Irrlicht visualization system.

- **Name**: `chronoirr.ChVisualSystemIrrlicht`
  - **Arguments**: None.
  - **Usage**: Initializes the Irrlicht visualization system.

- **Name**: `vis.AttachSystem`
  - **Arguments**:
    - `sys`: The simulation system to visualize.
  - **Usage**: Attaches the physical system to the visualization system.

- **Name**: `vis.SetWindowSize`
  - **Arguments**:
    - `1024`, `768`: Window width and height.
  - **Usage**: Sets the size of the visualization window.

- **Name**: `vis.SetWindowTitle`
  - **Arguments**:
    - `'NSC callbacks'`: Title of the window.
  - **Usage**: Sets the title of the visualization window.

- **Name**: `vis.Initialize`
  - **Arguments**: None.
  - **Usage**: Initializes the visualization window.

- **Name**: `vis.AddLogo`
  - **Arguments**:
    - `chrono.GetChronoDataFile('logo_pychrono_alpha.png')`: Path to the logo file.
  - **Usage**: Adds a logo to the visualization window.

- **Name**: `vis.AddSkyBox`
  - **Arguments**: None.
  - **Usage**: Adds a skybox to the scene.

- **Name**: `vis.AddCamera`
  - **Arguments**:
    - `chrono.ChVector3d(4, 4, -6)`: Position of the camera.
  - **Usage**: Adds a camera to the scene at the specified position.

- **Name**: `vis.AddTypicalLights`
  - **Arguments**: None.
  - **Usage**: Adds typical lights to the scene.

## Initialize Body
This section lists and describes the APIs and functions used to initialize bodies in the simulation, including their properties and how they are added to the system.

### **Creating Bodies**
Creates and configures the rigid bodies in the simulation.

- **Name**: `chrono.ChBody`
  - **Arguments**: None.
  - **Usage**: Initializes a new rigid body.

- **Name**: `sys.AddBody`
  - **Arguments**:
    - `box1`, `box2`: Bodies to be added to the simulation.
  - **Usage**: Adds bodies to the simulation system.

- **Name**: `box1.SetMass`, `box2.SetMass`
  - **Arguments**:
    - `10`: Mass of the body.
  - **Usage**: Sets the mass of the body.

- **Name**: `box1.SetInertiaXX`, `box2.SetInertiaXX`
  - **Arguments**:
    - `chrono.ChVector3d(1, 1, 1)`: Principal moments of inertia.
  - **Usage**: Sets the inertia tensor for the body.

- **Name**: `box1.SetPos`, `box2.SetPos`
  - **Arguments**:
    - `chrono.ChVector3d(x, y, z)`: Position of the body.
  - **Usage**: Sets the initial position of the body.

- **Name**: `box1.SetPosDt`, `box2.SetPosDt`
  - **Arguments**:
    - `chrono.ChVector3d(x, y, z)`: Initial velocity of the body.
  - **Usage**: Sets the initial velocity of the body.

- **Name**: `sys.Add`
  - **Arguments**:
    - `container`: The container body.
  - **Usage**: Adds the container to the simulation system.

### **Enabling Collision and Setting Parameters**
Configuring collision and visual properties of the bodies.

- **Name**: `container.EnableCollision`, `box1.EnableCollision`, `box2.EnableCollision`
  - **Arguments**: 
    - `True`: Enables collision for the body.
  - **Usage**: Enables collision detection for the specified body.

- **Name**: `container.SetPos`, `box1.SetPos`, `box2.SetPos`
  - **Arguments**: 
    - `chrono.ChVector3d(x, y, z)`: Position of the body.
  - **Usage**: Sets the position of the body.

- **Name**: `chronoirr.AddBoxGeometry`
  - **Arguments**:
    - `container`, `box1`, `box2`: Bodies to which geometry is added.
    - `material`: Material of the box.
    - `chrono.ChVector3d(x, y, z)`: Dimensions of the box.
    - `chrono.ChVector3d(x, y, z)`: Position of the box.
  - **Usage**: Adds box geometry to the given body.

- **Name**: `container.GetCollisionModel().SetEnvelope`, `box1.GetCollisionModel().SetEnvelope`, `box2.GetCollisionModel().SetEnvelope`
  - **Arguments**:
    - `collision_envelope`: Collision envelope parameter.
  - **Usage**: Sets the collision envelope for the body.

- **Name**: `container.GetVisualShape(0).SetColor`, `box1.GetVisualShape(0).SetColor`, `box2.GetVisualShape(0).SetColor`
  - **Arguments**:
    - `chrono.ChColor(r, g, b)`: Color of the shape (RGB values).
  - **Usage**: Sets the color of the visual representation of the shape.

## Setting Parameters
This section lists and describes the parameters used in the code, such as radius, density, and initial speeds.

### Parameters:
- **Name**: `friction`
  - **Value**: `0.6`
  - **Usage**: Defines the friction coefficient for contact materials.

- **Name**: `collision_envelope`
  - **Value**: `0.001`
  - **Usage**: Sets the collision envelope, a parameter influencing collision detection precision.

## Simulation Loop
This section lists and describes the APIs and functions used in the simulation loop, including solver settings and rendering steps.

### Simulation Execution
Runs the simulation using a visualization loop.

- **Name**: `sys.SetGravitationalAcceleration`
  - **Arguments**:
    - `chrono.ChVector3d(0, -10, 0)`: Gravitational acceleration vector.
  - **Usage**: Sets the gravity vector for the simulation.

- **Name**: `sys.GetSolver().AsIterative().SetMaxIterations`
  - **Arguments**:
    - `100`: Maximum number of iterations for the solver.
  - **Usage**: Sets the maximum number of iterations the solver will perform.

- **Name**: `sys.GetSolver().AsIterative().SetTolerance`
  - **Arguments**:
    - `0`: Tolerance of the solver.
  - **Usage**: Sets the solver tolerance for numerical stability.

- **Name**: `sys.SetMaxPenetrationRecoverySpeed`
  - **Arguments**:
    - `1e8`: Maximum penetration recovery speed.
  - **Usage**: Sets the recovery speed for penetration of colliding bodies.

- **Name**: `vis.Run`
  - **Arguments**: None.
  - **Usage**: Checks if the visualization window is open.

- **Name**: `vis.BeginScene`
  - **Arguments**: None.
  - **Usage**: Begins rendering of the scene.

- **Name**: `vis.Render`
  - **Arguments**: None.
  - **Usage**: Renders the scene.

- **Name**: `chronoirr.drawGrid`
  - **Arguments**:
    - `vis`: Visualization system.
    - `0.5`, `0.5`: Grid spacing.
    - `12`, `12`: Number of grid lines in x and y directions.
    - `chrono.ChCoordsysd(chrono.ChVector3d(0, 0, 0), chrono.QuatFromAngleX(chrono.CH_PI_2))`: Coordinates for the grid.
  - **Usage**: Draws a grid in the scene.

- **Name**: `chronoirr.drawAllCOGs`
  - **Arguments**:
    - `vis`: Visualization system.
    - `1.0`: Scale factor for the COGs (Centers of Gravity).
  - **Usage**: Draws the Centers of Gravity for all bodies.

- **Name**: `vis.EndScene`
  - **Arguments**: None.
  - **Usage**: Ends rendering of the scene.

- **Name**: `sys.DoStepDynamics`
  - **Arguments**:
    - `1e-3`: Time step for the dynamics simulation.
  - **Usage**: Advances the simulation by a specified time step.

- **Name**: `sys.GetChTime`
  - **Arguments**: None.
  - **Usage**: Gets the current simulation time.

- **Name**: `sys.GetNumContacts`
  - **Arguments**: None.
  - **Usage**: Retrieves the number of contacts in the current simulation step.

- **Name**: `sys.GetContactContainer().ReportAllContacts`
  - **Arguments**:
    - `creporter`: Contact reporter instance to handle contact information.
  - **Usage**: Reports all contacts to the specified reporter.

---

This completes the detailed documentation for the Chrono simulation code example, encompassing all major sections and APIs used.