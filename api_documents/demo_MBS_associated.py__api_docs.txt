# Code Example Documentation

## Library

### Libraries and Modules
- **math**: This module provides access to various mathematical functions.
- **pychrono as chrono**: The main Chrono library for physics simulations.
- **pychrono.irrlicht as chronoirr**: The Chrono library's Irrlicht module for visualization.

## Contact and Collision Setting
APIs and functions related to setting up contact materials, collision shapes, and collision settings.

### chrono.ChSystemNSC
- **Arguments**: None.
- **Usage**: Creates a new physical system for the simulation.

### chrono.ChCollisionSystem.Type_BULLET
- **Arguments**: None.
- **Usage**: Specifies the type of collision system to be used, in this case, the Bullet collision system.

### chrono.ChCollisionModel.SetDefaultSuggestedEnvelope
- **Arguments**: 
  - `envelope (float)`: Suggested collision envelope.
- **Usage**: Sets the global collision envelop to increase simulation accuracy.

### chrono.ChCollisionModel.SetDefaultSuggestedMargin
- **Arguments**: 
  - `margin (float)`: Suggested collision margin.
- **Usage**: Sets the global collision margin to help with collision detection stability.

### chrono.ChContactMaterialNSC
- **Arguments**: None.
- **Usage**: Creates a contact material used in non-smooth contact simulations.

### brick_material.SetFriction
- **Arguments**: 
  - `friction (float)`: Friction coefficient of the material.
- **Usage**: Sets the friction coefficient for the contact material.

### brick_material.SetDampingF
- **Arguments**: 
  - `damping (float)`: Contact material damping coefficient.
- **Usage**: Sets the damping factor for the contact material.

### brick_material.SetCompliance
- **Arguments**: 
  - `compliance (float)`: Normal compliance.
- **Usage**: Sets the compliance (inverse of stiffness) in the normal direction.

### brick_material.SetComplianceT
- **Arguments**: 
  - `compliance (float)`: Tangential compliance.
- **Usage**: Sets the compliance (inverse of stiffness) in the tangential direction.

## Visualization Setting
APIs and functions related to setting up the visualization.

### chronoirr.ChVisualSystemIrrlicht
- **Arguments**: None.
- **Usage**: Creates an Irrlicht visualization system for the simulation.

### vis.AttachSystem
- **Arguments**: 
  - `sys (chrono.ChSystemNSC)`: The physical system to be visualized.
- **Usage**: Attaches the physical system to the visualization system.

### vis.SetWindowSize
- **Arguments**: 
  - `width (int)`: Width of the window.
  - `height (int)`: Height of the window.
- **Usage**: Sets the size of the visualization window.

### vis.SetWindowTitle
- **Arguments**: 
  - `title (str)`: Title of the window.
- **Usage**: Sets the title of the visualization window.

### vis.Initialize
- **Arguments**: None.
- **Usage**: Initializes the visualization system.

### vis.AddLogo
- **Arguments**: 
  - `logoPath (str)`: Path to the logo file.
- **Usage**: Adds a logo to the visualization window.

### vis.AddSkyBox
- **Arguments**: None.
- **Usage**: Adds a skybox to the visualization.

### vis.AddCamera
- **Arguments**: 
  - `pos (chrono.ChVector3d)`: Position of the camera.
- **Usage**: Adds a camera to the visualization at the specified position.

### vis.AddTypicalLights
- **Arguments**: None.
- **Usage**: Adds typical lighting to the scene.

## Initialize Body
Functions used to initialize bodies in the simulation.

### chrono.ChBodyEasySphere
- **Arguments**: 
  - `radius (float)`: Radius of the sphere.
  - `density (float)`: Density of the sphere material.
  - `visualize (bool)`: Whether to visualize the sphere.
  - `collision (bool)`: Whether the sphere has collision enabled.
  - `material (chrono.ChContactMaterialNSC)`: Contact material.
- **Usage**: Creates a spherical body with specified properties and adds it to the system.

### chrono.ChBodyEasyConvexHullAuxRef
- **Arguments**: 
  - `points (vector_ChVector3d)`: Points defining the convex hull.
  - `density (float)`: Density of the material.
  - `visualize (bool)`: Whether to visualize the convex hull.
  - `collision (bool)`: Whether the hull has collision enabled.
  - `material (chrono.ChContactMaterialNSC)`: Contact material.
- **Usage**: Creates a convex hull body from given points and adds it to the system.

### chrono.vector_ChVector3d
- **Arguments**: 
  - `list of ChVector3d`: List of vectors defining points in space.
- **Usage**: Helper function to create a list of ChVector3d points.

### mbodyL.SetFixed
- **Arguments**: 
  - `fixed (bool)`: Whether the body is fixed in space.
- **Usage**: Sets the fixed status of a body - fixed bodies do not move.

### sys.Add
- **Arguments**: 
  - `body (chrono.ChBody)`: Body to be added to the simulation system.
- **Usage**: Adds a body to the simulation system.

## Setting Parameters
Parameters used in the code, such as radius, density, and initial speeds.

* `phi (float)`: 40 degrees converted to radians, used to define the friction coefficient.
* `rad_sph (float)`: Radius of the sphere.
* `alpha (float)`: 45 degrees converted to radians, used to define points in space.
* `beta (float)`: Another angle, derived from alpha.
* `thick (float)`: Thickness parameter used in defining shapes.
* `fixed_L (bool)`: Determines if a specific body is fixed.
* `S0, Sr, Sl, Dr, Dl, Dz`: Various vectors used to construct points in space.

## Simulation Loop
APIs and functions used in the simulation loop for dynamics and rendering steps.

### chrono.ChSolverBB
- **Arguments**: None.
- **Usage**: Creates a Barzilai-Borwein solver for the system.

### sys.SetSolver
- **Arguments**: 
  - `solver (chrono.ChSolver)`: Solver to be used for the simulation.
- **Usage**: Sets the solver for the physical system.

### solver.SetMaxIterations
- **Arguments**: 
  - `maxIter (int)`: Maximum number of solver iterations.
- **Usage**: Sets the maximum number of iterations for the solver.

### solver.EnableWarmStart
- **Arguments**: 
  - `warmStart (bool)`: Whether to enable warm starting.
- **Usage**: Enables or disables warm starting in the solver (initial guess from previous solution).

### sys.SetMaxPenetrationRecoverySpeed
- **Arguments**: 
  - `speed (float)`: Maximum speed for penetration recovery.
- **Usage**: Sets the maximum recovery speed for penetration handling in the simulation.

### sys.SetMinBounceSpeed
- **Arguments**: 
  - `speed (float)`: Minimum speed below which bouncing is not considered.
- **Usage**: Sets the minimum bounce speed to help with elastic collisions.

### vis.Run
- **Arguments**: None.
- **Usage**: Check if the visualization should continue running.

### vis.BeginScene
- **Arguments**: None.
- **Usage**: Begins the rendering of a new scene.

### vis.Render
- **Arguments**: None.
- **Usage**: Renders the scene.

### vis.EndScene
- **Arguments**: None.
- **Usage**: Ends the rendering of the scene.

### sys.DoStepDynamics
- **Arguments**: 
  - `timeStep (float)`: Time step for the dynamics simulation.
- **Usage**: Advances the simulation by the specified time step.