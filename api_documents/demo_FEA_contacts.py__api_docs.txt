# API Documentation

## Library
The code utilizes the following libraries and modules:
1. **math**: General mathematical operations.
2. **pychrono**: Main library for mechanical simulations.
3. **pychrono.fea**: Module for finite element analysis.
4. **pychrono.irrlicht**: Module for visualization using Irrlicht.

## Contact and Collision Setting
### **chrono.ChSystemSMC()**
- **Arguments**: None
- **Usage**: Initializes a Chrono simulation system using the Signorini-Myers-Coulomb contact model.

### **sys.SetCollisionSystemType(type)**
- **Arguments**:
  - `type`: Type of collision system, `chrono.ChCollisionSystem.Type_BULLET` for example.
- **Usage**: Sets the type of collision system for the simulation.

### **chrono.ChCollisionInfo.SetDefaultEffectiveCurvatureRadius(radius)**
- **Arguments**:
  - `radius`: Effective curvature radius.
- **Usage**: Sets the default effective radius of curvature for all SCM contacts.

### **chrono.ChCollisionModel.SetDefaultSuggestedMargin(margin)**
- **Arguments**:
  - `margin`: Suggested margin.
- **Usage**: Sets the default suggested margin for collision models.

### **chrono.ChContactMaterialSMC()**
- **Arguments**: None
- **Usage**: Creates a surface material for SMC (penalty) method contacts.

### **mysurfmaterial.SetYoungModulus(modulus)**
- **Arguments**:
  - `modulus`: Young's modulus of the material.
- **Usage**: Sets the Young's modulus of the contact material.

### **mysurfmaterial.SetFriction(friction)**
- **Arguments**:
  - `friction`: Friction coefficient.
- **Usage**: Sets the friction coefficient for the contact material.

### **mysurfmaterial.SetRestitution(restitution)**
- **Arguments**:
  - `restitution`: Coefficient of restitution.
- **Usage**: Sets the coefficient of restitution for the contact material.

### **mysurfmaterial.SetAdhesion(adhesion)**
- **Arguments**:
  - `adhesion`: Adhesion factor.
- **Usage**: Sets the adhesion characteristic for the contact material.

## Visualization Setting
### **mmeshbox.LoadWavefrontMesh(filepath, mparam, tparam)**
- **Arguments**:
  - `filepath`: Path to the mesh file.
  - `mparam`: Main parameter.
  - `tparam`: Optional texture parameter.
- **Usage**: Loads a Wavefront mesh file.

### **mfloor.GetCollisionModel().Clear()**
- **Arguments**: None
- **Usage**: Clears any previously loaded collision model.

### **mfloor.GetCollisionModel().AddShape(shape)**
- **Arguments**:
  - `shape`: Collision shape object.
- **Usage**: Adds a collision shape to the body.

### **mfloor.GetCollisionModel().Build()**
- **Arguments**: None
- **Usage**: Configures the collision model after adding shapes.

### **mfloor.AddVisualShapeFEA(texture)**
- **Arguments**:
  - `texture`: Texture object.
- **Usage**: Adds a visual shape for FEA mesh to the body.

### **mfloor.SetFixed(is_fixed)**
- **Arguments**:
  - `is_fixed`: Boolean indicating if the body is fixed.
- **Usage**: Sets the body to be fixed or not.

### **chrono.ChTexture()**
- **Arguments**: None
- **Usage**: Creates a texture object.

### **masset_texture.SetTextureFilename(filepath)**
- **Arguments**:
  - `filepath`: Path to the texture file.
- **Usage**: Sets the texture file for the body.

## Initialize Body
### **chrono.ChBodyEasyBox(x, y, z, density, collide, visualize, material)**
- **Arguments**:
  - `x, y, z`: Dimensions of the box.
  - `density`: Material density.
  - `collide`: Whether the body should collide.
  - `visualize`: Whether the body should be visualized.
  - `material`: Surface material.
- **Usage**: Creates an easy-to-use box body with the specified parameters.

### **chrono.ChBodyEasySphere(radius, density, collide, visualize, material)**
- **Arguments**:
  - `radius`: Radius of the sphere.
  - `density`: Material density.
  - `collide`: Whether the body should collide.
  - `visualize`: Whether the body should be visualized.
  - `material`: Surface material.
- **Usage**: Creates an easy-to-use sphere body with the specified parameters.

### **sys.Add(body)**
- **Arguments**:
  - `body`: Body object to be added to the system.
- **Usage**: Adds a body to the physical system's simulation.

### **body.SetPos(position)**
- **Arguments**:
  - `position`: Position vector for the body.
- **Usage**: Sets the position of the body in the simulation.

## Setting Parameters
### **Sphere and Box Parameters**
- **radius**: 0.1 (for sphere)
- **density**: 2700 (for both cube and sphere)
- **initial speeds**: Not explicitly set in this example.

## Simulation Loop
### **chrono.ChSolverMINRES()**
- **Arguments**: None
- **Usage**: Creates a MINRES solver for the system.

### **sys.SetSolver(solver)**
- **Arguments**:
  - `solver`: Solver object (e.g., `chrono.ChSolverMINRES`).
- **Usage**: Sets the solver used for the system.

### **solver.SetMaxIterations(iterations)**
- **Arguments**:
  - `iterations`: Maximum number of iterations.
- **Usage**: Sets the maximum iterations for the solver.

### **solver.SetTolerance(tolerance)**
- **Arguments**:
  - `tolerance`: Tolerance for the solver.
- **Usage**: Sets the tolerance level for the solver.

### **solver.EnableDiagonalPreconditioner(precond)**
- **Arguments**:
  - `precond`: Boolean flag to enable diagonal preconditioning.
- **Usage**: Enables or disables diagonal preconditioning.

### **solver.EnableWarmStart(warm_start)**
- **Arguments**:
  - `warm_start`: Boolean flag to enable warm-starting for the solver.
- **Usage**: Enables warm starting, which can improve solver convergence.

### **sys.DoStepDynamics(step_size)**
- **Arguments**:
  - `step_size`: Time step size for the simulation.
- **Usage**: Advances the simulation by a single time step.

### **vis.Run()**
- **Arguments**: None
- **Usage**: Checks if the Irrlicht visualization system is running.

### **vis.BeginScene()**
- **Arguments**: None
- **Usage**: Begins the scene for visualization rendering.

### **vis.Render()**
- **Arguments**: None
- **Usage**: Renders the current frame in the visualization system.

### **vis.EndScene()**
- **Arguments**: None
- **Usage**: Ends the scene for visualization rendering.

### **chronoirr.ChVisualSystemIrrlicht()**
- **Arguments**: None
- **Usage**: Creates an Irrlicht visualization system attached to the simulation system.

### **vis.AttachSystem(system)**
- **Arguments**:
  - `system`: Simulation system to attach for visualization.
- **Usage**: Attaches the simulation system to the Irrlicht visualization system.

### **vis.SetWindowSize(width, height)**
- **Arguments**:
  - `width`: Width of the window.
  - `height`: Height of the window.
- **Usage**: Sets the size of the visualization window.

### **vis.SetWindowTitle(title)**
- **Arguments**:
  - `title`: Title of the window.
- **Usage**: Sets the window title for the visualization system.

### **vis.Initialize()**
- **Arguments**: None
- **Usage**: Initializes the visualization system.

### **vis.AddLogo(filepath)**
- **Arguments**:
  - `filepath`: File path to the logo image.
- **Usage**: Adds a logo to the visualization.

### **vis.AddSkyBox()**
- **Arguments**: None
- **Usage**: Adds a skybox to the visualization environment.

### **vis.AddCamera(position)**
- **Arguments**:
  - `position`: Position vector for the camera.
- **Usage**: Adds a camera to the visualization system at the specified position.

### **vis.AddTypicalLights()**
- **Arguments**: None
- **Usage**: Adds typical lighting to the visualization environment.

### **vis.EnableContactDrawing(mode)**
- **Arguments**:
  - `mode`: Contact drawing mode (e.g., `chronoirr.ContactsDrawMode_CONTACT_DISTANCES`).
- **Usage**: Enables the drawing of contacts in the visualization system with the specified mode.

This documentation covers the main functions, methods, and settings used in the provided code example.