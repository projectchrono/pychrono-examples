### PyChrono API Prompt Engineering Guide for Robot Simulations

## Overview
This guide provides structured prompts for generating PyChrono robot simulations using the updated API. The focus is on utilizing new class names, methods, and parameter changes.

## Context
Provide the AI with context about the task. Here is a standard system message to initialize the conversation:

```plaintext
You are an expert in generating PyChrono simulations for robotic systems. You have been updated with the latest PyChrono API changes, including new class names, methods, and parameter updates. Your task is to generate accurate PyChrono simulation code using the new API conventions.
```

## Key API Changes

1. **Vector and Quaternion Classes**
   - `chrono.ChVectorD` -> `chrono.ChVector3d`
   - `chrono.ChQuaternionD` -> `chrono.ChQuaterniond`

2. **Frame Classes**
   - `chrono.ChFrameD` -> `chrono.ChFramed`

3. **Collision System**
   - `SetCollisionSystemType(chrono.ChCollisionSystem.Type_BULLET)`

4. **Gravitational Acceleration**
   - `SetGravitationalAcceleration(chrono.ChVector3d(...))`

5. **Material Classes**
   - `chrono.ChMaterialSurfaceNSC` -> `chrono.ChContactMaterialNSC`

6. **Position and Fixing**
   - `SetPos(chrono.ChVector3d(...))`
   - `SetFixed(True)`

7. **Visualization Classes**
   - `chrono.ChBoxShape` -> `chrono.ChVisualShapeBox`

8. **Contact Properties**
   - Material properties are set using `SetFriction`, `SetRestitution`, and `SetYoungModulus`.

9. **System Initialization**
   - Use of `chrono.ChSystemNSC` or `chrono.ChSystemSMC` based on the contact method.

10. **Driver and Control Systems**
    - Initialization of driver systems with specific actuation files and modes.

### Detailed Explanation of Key Functions

1. **System Initialization**
   ```python
   if contact_method == chrono.ChContactMethod_NSC:
       sys = chrono.ChSystemNSC()
   else:
       sys = chrono.ChSystemSMC()
   sys.SetCollisionSystemType(chrono.ChCollisionSystem.Type_BULLET)
   sys.GetSolver().AsIterative().SetMaxIterations(200)
   sys.SetSolverType(chrono.ChSolver.Type_BARZILAIBORWEIN)
   sys.SetGravitationalAcceleration(chrono.ChVector3d(0, 0, -9.8))
   ```
   - Initializes the Chrono system and sets up the collision system, solver type, and gravitational acceleration.

2. **RoboSimian Robot Initialization**
   ```python
   robot = robosimian.RoboSimian(sys, True, True)
   robot.SetOutputDirectory(out_dir)
   robot.Initialize(chrono.ChCoordsysd(chrono.ChVector3d(0, 0, 0), chrono.QuatFromAngleX(chrono.CH_PI)))
   ```
   - Initializes the RoboSimian robot with specified initial position and rotation.

3. **Driver Setup**
   ```python
   if mode == robosimian.LocomotionMode_WALK:
       driver = robosimian.RS_Driver(..., ..., ..., True)
   ...
   driver.SetTimeOffsets(duration_pose, duration_settle_robot)
   robot.SetDriver(driver)
   ```
   - Configures the driver for the RoboSimian with different locomotion modes and sets time offsets for the simulation phases.

4. **Visualization Setup**
   ```python
   vis = chronoirr.ChVisualSystemIrrlicht()
   vis.AttachSystem(sys)
   vis.SetWindowSize(1024, 768)
   vis.SetWindowTitle('RoboSimian - Rigid terrain')
   vis.Initialize()
   vis.AddLogo(chrono.GetChronoDataFile('logo_pychrono_alpha.png'))
   vis.AddSkyBox()
   vis.AddCamera(chrono.ChVector3d(1, -2.75, 0.2), chrono.ChVector3d(1, 0, 0))
   vis.AddLight(chrono.ChVector3d(100, +100, 100), 290)
   vis.AddLight(chrono.ChVector3d(100, -100, 80), 190)
   ```
   - Sets up the Irrlicht visualization system for the simulation.

5. **Simulation Loop**
   ```python
   while vis.Run():
       if drop and not terrain_created and sys.GetChTime() > time_create_terrain:
           z = robot.GetWheelPos(robosimian.FR).z - 0.15
           length = 8
           width = 2
           ground = CreateTerrain(sys, length, width, z, length / 4)
           SetContactProperties(robot)
           vis.BindItem(ground)
           robot.GetChassisBody().SetFixed(False)
           terrain_created = True
       ...
       robot.DoStepDynamics(time_step)
       sim_frame += 1
       vis.EndScene()
   ```
   - Manages the simulation loop, terrain creation, rendering, and data output.

## Pipeline for Generating New Simulations

1. **Define the Simulation Requirements**
   - Specify the type of simulation, object properties, forces, constraints, and visualizations needed.

2. **Generate the Initial Code Snippet**
   - Use prompt engineering to generate the initial PyChrono code snippet.

3. **Validate the Generated Code**
   - Ensure that the generated code aligns with the latest API changes and runs correctly.

4. **Add Detailed Comments and Documentation**
   - Include comments in the code to explain each step and function used.

5. **Run the Simulation**
   - Execute the simulation and verify the results.

6. **Iterate and Refine**
   - Make necessary adjustments to the code based on the simulation results and rerun until the desired outcome is achieved.

By following this comprehensive guide, you can effectively generate and run PyChrono robot simulations using the latest API changes. This ensures that your simulations are accurate, up-to-date, and leverage the new features of the PyChrono library.